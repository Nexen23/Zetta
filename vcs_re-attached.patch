Index: app/src/main/app/src/main/java/com/example/zetta/ZLog.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/ZLog.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/ZLog.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,198 +0,0 @@
-package com.example.zetta;
-
-import java.util.HashMap;
-
-import android.util.Log;
-
-public final class ZLog 
-{
-	static final public String		TAG_LOG = "TAG_LOG",
-									TAG_ACTIVITY = "TAG_ACTIVITY", 
-									TAG_THREAD_GL = "TAG_THREAD_GL",
-									TAG_THREAD_GAME = "TAG_THREAD_GAME",
-									
-									TAG_TOUCHSCREEN = "TAG_TOUCHSCREEN",
-									TAG_MEMORY_USAGE = "TAG_MEMORY_USAGE",
-									TAG_GRAPHICS = "TAG_GRAPHICS",
-									TAG_AI = "TAG_AI";
-	static final public int			SECURITY_LEVEL_NOTIFICATION = 0,
-									SECURITY_LEVEL_WARNING = 1,
-									SECURITY_LEVEL_ERROR = 2,
-									
-									STACKTRACE_OFFSET = 3;
-	
-	static final private boolean 	DEBUG = true;
-	static final private HashMap<String, Boolean> switcher = new HashMap<String, Boolean>();
-	
-	static 
-	{
-		switcher.put(TAG_LOG, true);
-		switcher.put(TAG_ACTIVITY, true);
-		switcher.put(TAG_THREAD_GL, true);
-		switcher.put(TAG_THREAD_GAME, true);
-		
-		switcher.put(TAG_TOUCHSCREEN, true);
-		switcher.put(TAG_MEMORY_USAGE, true);
-		switcher.put(TAG_GRAPHICS, true);
-		switcher.put(TAG_AI, true);
-	}
-	
-	static public void d(int securityLevel, String tag, String data)
-	{
-		if (DEBUG == true)
-		{
-			StackTraceElement[] stackTraceElements;
-			String calledClass, calledMethod;
-			stackTraceElements = Thread.currentThread().getStackTrace();
-			calledClass = ParseClassName(stackTraceElements[STACKTRACE_OFFSET].getClassName());
-			calledMethod = stackTraceElements[STACKTRACE_OFFSET].getMethodName();
-			if (switcher.containsKey(tag) == false)
-			{
-				Log.d(TAG_LOG, "Error[" + calledClass + "." + calledMethod + "()]: no such tag (" + tag + ")");
-			}
-			else
-				if (switcher.get(tag) == true)
-				{
-					switch(securityLevel)
-					{
-					case SECURITY_LEVEL_NOTIFICATION:
-						Log.d(tag, "Notification[" + calledClass + "." + calledMethod + "()]: " + data);
-						break;
-						
-					case SECURITY_LEVEL_WARNING :
-						Log.d(tag, "Warning[" + calledClass + "." + calledMethod + "()]: " + data);
-						break;
-						
-					case SECURITY_LEVEL_ERROR :
-						Log.d(tag, "Error[" + calledClass + "." + calledMethod + "()]: " + data);
-						break;
-						
-					default:
-						Log.d(tag, "Error[" + calledClass + "." + calledMethod + "()]: no such security level");
-						break;
-					}
-				}
-		}
-	}
-	
-	static public void d(int securityLevel, String tag)
-	{
-		if (DEBUG == true)
-		{
-			StackTraceElement[] stackTraceElements;
-			String calledClass, calledMethod, data = "";
-			stackTraceElements = Thread.currentThread().getStackTrace();
-			calledClass = ParseClassName(stackTraceElements[STACKTRACE_OFFSET].getClassName());
-			calledMethod = stackTraceElements[STACKTRACE_OFFSET].getMethodName();
-			if (switcher.containsKey(tag) == false)
-			{
-				Log.d(TAG_LOG, "Error[" + calledClass + "." + calledMethod + "()]: no such tag (" + tag + ")");
-			}
-			else
-				if (switcher.get(tag) == true)
-				{
-					switch(securityLevel)
-					{
-					case SECURITY_LEVEL_NOTIFICATION:
-						Log.d(tag, "Notification[" + calledClass + "." + calledMethod + "()]: " + data);
-						break;
-						
-					case SECURITY_LEVEL_WARNING :
-						Log.d(tag, "Warning[" + calledClass + "." + calledMethod + "()]: " + data);
-						break;
-						
-					case SECURITY_LEVEL_ERROR :
-						Log.d(tag, "Error[" + calledClass + "." + calledMethod + "()]: " + data);
-						break;
-						
-					default:
-						Log.d(tag, "Error[" + calledClass + "." + calledMethod + "()]: no such security level");
-						break;
-					}
-				}
-		}
-	}
-	
-	static public void d(String tag, String data)
-	{
-		if (DEBUG == true)
-		{
-			StackTraceElement[] stackTraceElements;
-			int stackTraceElementsLength, securityLevel = SECURITY_LEVEL_NOTIFICATION;
-			stackTraceElements = Thread.currentThread().getStackTrace();
-			String calledClass, calledMethod;
-			calledClass = ParseClassName(stackTraceElements[STACKTRACE_OFFSET].getClassName());
-			calledMethod = stackTraceElements[STACKTRACE_OFFSET].getMethodName();
-			if (switcher.containsKey(tag) == false)
-			{
-				Log.d(TAG_LOG, "Error[" + calledClass + "." + calledMethod + "()]: no such tag (" + tag + ")");
-			}
-			else
-				if (switcher.get(tag) == true)
-				{
-					switch(securityLevel)
-					{
-					case SECURITY_LEVEL_NOTIFICATION:
-						Log.d(tag, "Notification[" + calledClass + "." + calledMethod + "()]: " + data);
-						break;
-						
-					case SECURITY_LEVEL_WARNING :
-						Log.d(tag, "Warning[" + calledClass + "." + calledMethod + "()]: " + data);
-						break;
-						
-					case SECURITY_LEVEL_ERROR :
-						Log.d(tag, "Error[" + calledClass + "." + calledMethod + "()]: " + data);
-						break;
-						
-					default:
-						Log.d(tag, "Error[" + calledClass + "." + calledMethod + "()]: no such security level");
-						break;
-					}
-				}
-		}
-	}
-	
-	static public void d(String tag)
-	{
-		if (DEBUG == true)
-		{
-			StackTraceElement[] stackTraceElements;
-			int securityLevel = SECURITY_LEVEL_NOTIFICATION;
-			String calledClass, calledMethod, data = "";
-			stackTraceElements = Thread.currentThread().getStackTrace();
-			calledClass = ParseClassName(stackTraceElements[STACKTRACE_OFFSET].getClassName());
-			calledMethod = stackTraceElements[STACKTRACE_OFFSET].getMethodName();
-			if (switcher.containsKey(tag) == false)
-			{
-				Log.d(TAG_LOG, "Error[" + calledClass + "." + calledMethod + "()]: no such tag (" + tag + ")");
-			}
-			else
-				if (switcher.get(tag) == true)
-				{
-					switch(securityLevel)
-					{
-					case SECURITY_LEVEL_NOTIFICATION:
-						Log.d(tag, "Notification[" + calledClass + "." + calledMethod + "()]: " + data);
-						break;
-						
-					case SECURITY_LEVEL_WARNING :
-						Log.d(tag, "Warning[" + calledClass + "." + calledMethod + "()]: " + data);
-						break;
-						
-					case SECURITY_LEVEL_ERROR :
-						Log.d(tag, "Error[" + calledClass + "." + calledMethod + "()]: " + data);
-						break;
-						
-					default:
-						Log.d(tag, "Error[" + calledClass + "." + calledMethod + "()]: no such security level");
-						break;
-					}
-				}
-		}
-	}
-	
-	static private String ParseClassName(String name) 
-	{
-		return name.substring(name.lastIndexOf('.') + 1);
-	}
-}
Index: app/src/main/app/src/main/res/raw/machineries.txt
===================================================================
--- app/src/main/app/src/main/res/raw/machineries.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/raw/machineries.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,66 +0,0 @@
-// id - 1
-1
-0
-4
-1
-350
-350
-350
-350
-8
-4
-4
-1
-0
-4
-0
-0
-0
-350
-350
-350
-350
-// id - 2
-2
-0
-4
-1
-480
-480
-480
-480
-8
-4
-4
-1
-0
-4
-0
-0
-0.75
-480
-480
-480
-480
-// id - 3
-3
-0
-4
-1
-2450
-2450
-2450
-2450
-8
-4
-4
-1
-0
-4
-0
-0
-0.50
-2450
-2450
-2450
-2450
\ No newline at end of file
Index: app/src/main/app/src/main/java/com/example/zetta/core/ZGame.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/core/ZGame.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/core/ZGame.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,207 +0,0 @@
-package com.example.zetta.core;
-
-import java.io.IOException;
-import java.util.concurrent.Semaphore;
-import android.app.Activity;
-import android.content.Context;
-import android.content.res.Resources;
-
-import com.example.zetta.ZConstants;
-import com.example.zetta.ZLog;
-import com.example.zetta.ZProperty;
-import com.example.zetta.entity.ZLevel;
-
-public final class ZGame 
-{	
-	static public abstract interface IUpdatable
-	{
-		public abstract void update(long timeElapsed);
-	}
-	
-	static public abstract class Identity
-	{
-		public int id = ZConstants.IDENTITY_ID_INVALID;
-		public boolean isDestroyed = false;
-		
-		public Identity()
-		{
-			
-		}
-		
-		public Identity(int _id)
-		{
-			id = _id;
-		}
-		
-		public Identity(Identity e)
-		{
-			id = e.id;
-			isDestroyed = e.isDestroyed;
-		}
-		
-		public abstract void onDestroy();
-		public final void destroy()
-		{
-			isDestroyed = true;
-			onDestroy();
-		}
-	}
-	
-	private class UpdateRunnable implements Runnable
-	{
-		public void run()
-    	{
-    		String info = "";
-    		ZLog.d(ZLog.TAG_THREAD_GAME, "game thread - started");
-    		
-    		int x = 0; //TODO: delete
-    		level.player.physicsData.setCellsOccupied(); // TODO delete it?
-    		level.map.sequencerData.music.start();
-    		long timePrevious = System.currentTimeMillis(), timeCurrent, timeElapsed = 0; //timeSleeping; TODO
-    		try
-    		{
-	    		while(Thread.currentThread().isInterrupted() == false)
-	    		{
-	    			
-	    			++x;//TODO:: delete it
-	    			if (x == 33)
-	    			{
-	    				x = 0;
-	    				info = "\n";
-	    				info += "Total memory:\t" + (float)Runtime.getRuntime().totalMemory() / (float)(1024 * 1024) + "mb\n";
-	    				info += "Free memory:\t" + (float)Runtime.getRuntime().freeMemory() / (float)(1024 * 1024) + "mb\n";
-	    				info += "Max memory:\t" + (float)Runtime.getRuntime().maxMemory() / (float)(1024 * 1024) + "mb\n";
-	    				ZLog.d(ZLog.TAG_MEMORY_USAGE, info);
-	    			}
-	    			
-	    			timeCurrent = System.currentTimeMillis();
-	    			timeElapsed += timeCurrent - timePrevious;
-	    			level.time += timeElapsed;
-	    			info = "elapsed time = " + timeElapsed;
-	    			ZLog.d(ZLog.TAG_THREAD_GAME, info);
-	    			
-	    			ZPhysics.Update(timeElapsed);
-	    			ZGraphics.Update(timeElapsed);
-	    			ZSequencer.Update(timeElapsed);
-	    			ZGraphics.RequestRender();
-	    			
-	    			if (level.state != ZConstants.GAME_STATE_PLAYING)
-	    			{
-	    				info = "level state - " + 
-	    					((level.state == ZConstants.GAME_STATE_COMPLETED) ? "completed" : "failed");
-	    				ZLog.d(ZLog.TAG_THREAD_GAME, info);
-		    			Thread.currentThread().interrupt();
-	    			}
-
-	    			Thread.sleep(ZConstants.GAME_TIME_SLEEPING);
-	    			timeElapsed = System.currentTimeMillis() - timeCurrent; //TODO FAIL
-	    			//timeElapsed = 40;
-	    			
-					updateLock.acquire();
-					updateLock.release();
-					timePrevious = System.currentTimeMillis();
-	    		}
-    		}
-    		catch(InterruptedException e)
-    		{
-    			ZLog.d(ZLog.SECURITY_LEVEL_WARNING, ZLog.TAG_THREAD_GAME, "game thread - stopped");
-    			Thread.currentThread().interrupt();
-    		}
-    		level.map.sequencerData.music.stop();
-    	}
-	}
-	
-	static public ZLevel level;
-	static public Activity activity;
-	static public Context context;
-	static public Resources resources;
-	public Thread updateThread;
-	public Semaphore updateLock;
-	
-	public ZGame(Activity _activity)
-	{		
-		activity = _activity;	
-		context = activity.getApplicationContext();
-		resources = context.getResources();
-		updateLock = new Semaphore(1, true);
-		
-		try 
-		{
-			updateLock.acquire();
-		} 
-		catch (InterruptedException e) 
-		{
-
-		}
-		updateThread = new Thread(new UpdateRunnable());
-	}
-	
-	public void onCreate() 
-	{
-		short levelId = 1; // TODO: edit it 
-		ZFileSystem.Adjust();
-		ZGraphics.Adjust();
-		
-		ZFileSystem.LoadProperty();
-		ZFileSystem.LoadStatistics();
-		
-		level = new ZLevel(levelId, ZProperty.GetPlayer());
-		try
-		{
-			ZFileSystem.Load(level.map);
-		}
-		catch (IOException e)
-		{
-			e.printStackTrace(); //TODO
-		}
-		
-		ZGraphics.SetScene(level);
-		ZPhysics.SetScene(level);
-	}
-
-
-	public void onDestroy() 
-	{
-		updateThread = null;
-		updateLock = null;
-	}
-	
-	public void onStart() 
-	{
-		updateThread.start(); //TODO: 
-	}
-
-	public void onStop() 
-	{
-		updateThread.interrupt();
-		updateLock.release();
-	}
-	
-	public void onRestart() 
-	{
-		updateThread = new Thread(new UpdateRunnable());
-	}
-	
-	public void onResume() 
-	{
-		//TODO music wtf?
-		level.map.sequencerData.music.resume();
-		updateLock.release();
-		ZGraphics.OnResume();
-	}
-
-	public void onPause() 
-	{
-		try 
-		{
-			//TODO music wtf?
-			level.map.sequencerData.music.pause();
-			updateLock.acquire();
-			ZGraphics.OnPause();
-		} 
-		catch (InterruptedException e) 
-		{
-			e.printStackTrace();
-		}
-	}
-}
Index: app/src/main/app/src/main/res/raw/maps_common.txt
===================================================================
--- app/src/main/app/src/main/res/raw/maps_common.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/raw/maps_common.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,79 +0,0 @@
-// id - 1
-0
-30
-7
-8
-// items
-6
-3
-1
-4
-4
-2
-3
-0
-1
-2
-2
-2
-2
-4
-2
-5
-2
-1
-6
-7
-// objects
-4
-1
-3
-3
-1
-2
-3
-1
-4
-2
-1
-4
-3
-// machineries
-3
-1
-5
-5
-2
-0
-5
-3
-3
-6
-// mobs
-7
-1
-5
-1
-2
-3
-2
-3
-0
-3
-4
-1
-6
-5
-0
-0
-6
-4
-7
-7
-6
-4
-// entities end
-0
-0
-1
-2
\ No newline at end of file
Index: app/src/main/app/src/main/res/layout/activity_game.xml
===================================================================
--- app/src/main/app/src/main/res/layout/activity_game.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/layout/activity_game.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,16 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:paddingBottom="@dimen/activity_vertical_margin"
-    android:paddingLeft="@dimen/activity_horizontal_margin"
-    android:paddingRight="@dimen/activity_horizontal_margin"
-    android:paddingTop="@dimen/activity_vertical_margin"
-    tools:context=".ZGameActivity" >
-
-    <TextView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="@string/hello_world" />
-
-</RelativeLayout>
\ No newline at end of file
Index: app/src/main/app/src/main/res/raw/mobs.txt
===================================================================
--- app/src/main/app/src/main/res/raw/mobs.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/raw/mobs.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,252 +0,0 @@
-// id - 1 - walking
-4
-1
-3
-3
-1
-0
-0
-0
-0
-0
-0.0013
-0.9
-0.9
-4
-0
-0
-4
-0
-3
-3
-3
-3
-85
-6
-8
-0
-0
-0
-0.125
-0
-0.375
-0
-0.25
-0
-0
-// id - 2 - walking
-4
-1
-3
-3
-1
-0
-0
-0
-0
-0
-0.0013
-0.9
-0.9
-4
-0
-0
-4
-0
-3
-3
-3
-3
-85
-6
-8
-0.5
-0
-0.5
-0.125
-0.5
-0.375
-0.5
-0.25
-0.5
-0
-// id - 3 - walking
-4
-1
-3
-3
-1
-0
-0
-0
-0
-0
-0.0013
-0.9
-0.9
-4
-0
-0
-4
-0
-3
-3
-3
-3
-85
-6
-8
-0
-0.5
-0
-0.625
-0
-0.875
-0
-0.75
-0
-0.5
-// id - 4 - walking
-4
-1
-3
-3
-1
-0
-0
-0
-0
-0
-0.0013
-0.9
-0.9
-4
-0
-0
-4
-0
-3
-3
-3
-3
-85
-6
-8
-0.5
-0.5
-0.5
-0.625
-0.5
-0.875
-0.5
-0.75
-0.5
-0.5
-// id - 5 - flying(texture)
-4
-1
-3
-3
-1
-0
-0
-0
-0
-0
-0.0013
-0.9
-0.9
-5
-0
-0
-4
-0
-3
-3
-3
-3
-85
-9
-4
-0
-0
-0
-0.25
-0
-0.75
-0
-0.5
-0
-0
-// id - 6 - flying(texture)
-4
-1
-3
-3
-1
-0
-0
-0
-0
-1
-0.0013
-0.9
-0.9
-5
-0
-0
-4
-0
-3
-3
-3
-3
-85
-9
-4
-0.3333333
-0
-0.3333333
-0.25
-0.3333333
-0.75
-0.3333333
-0.5
-0.3333333
-0
-// id - 7 - flying(texture)
-4
-1
-3
-3
-1
-0
-0
-0
-0
-0
-0.0013
-0.9
-0.9
-5
-0
-0
-4
-0
-3
-3
-3
-3
-85
-9
-4
-0.6666666
-0
-0.6666666
-0.25
-0.6666666
-0.75
-0.6666666
-0.5
-0.6666666
-0
\ No newline at end of file
Index: app/src/main/app/src/main/java/com/example/zetta/core/ZSequencer.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/core/ZSequencer.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/core/ZSequencer.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,195 +0,0 @@
-package com.example.zetta.core;
-
-import java.util.ArrayList;
-
-import android.media.MediaPlayer;
-import com.example.zetta.ZConstants;
-import com.example.zetta.ZLog;
-
-public final class ZSequencer 
-{
-	static public abstract interface IPlayable
-	{
-		public void start();
-		public void stop();
-		
-		public void resume();
-		public void pause();
-	}
-	
-	static public abstract class SequencerData
-	{
-		public SequencerData()
-		{
-			
-		}
-		
-		public SequencerData(SequencerData d)
-		{
-			
-		}
-	}
-	
-	static abstract class Audio implements IPlayable
-	{
-		public MediaPlayer mediaPlayer;
-		public float volume = 0f;
-		public int resourceId;
-		
-		public Audio()
-		{
-			
-		}
-		
-		public Audio(int id)
-		{
-			resourceId = id;
-			mediaPlayer = MediaPlayer.create(ZGame.context, id);
-		}
-		
-		public Audio(Audio d)
-		{
-			resourceId = d.resourceId;
-			mediaPlayer = MediaPlayer.create(ZGame.context, d.resourceId);
-			volume = d.volume;
-		}
-		
-		public void set(int id, int _volume)
-		{
-			resourceId = id;
-			mediaPlayer = MediaPlayer.create(ZGame.context, id);
-			volume = GetVolumeFloat(_volume);
-		}
-		
-		public void setVolume(int _volume)
-		{
-			volume = GetVolumeFloat(_volume);
-		}
-		
-		public boolean isPlaying()
-		{
-			return mediaPlayer.isPlaying();
-		}
-		
-		@Override
-		public void stop()
-		{
-			mediaPlayer.stop();
-		}
-
-		@Override
-		public void resume() 
-		{
-			mediaPlayer.start();	
-		}
-
-		@Override
-		public void pause() 
-		{
-			mediaPlayer.pause();
-		}
-	}
-	
-	static public final class Sound extends Audio
-	{
-		public Sound()
-		{
-			super();
-		}
-		
-		public Sound(int id)
-		{
-			super(id);
-		}
-		
-		public Sound(Sound s)
-		{
-			super(s);
-		}
-		
-		@Override
-		public void start() 
-		{
-			mediaPlayer.setVolume(volume, volume);
-			mediaPlayer.start();
-		}
-	}
-
-	static public final class Music extends Audio
-	{
-		public Music()
-		{
-			super();
-		}
-		
-		public Music(int id)
-		{
-			super(id);
-		}
-		
-		public Music(Music m)
-		{
-			super(m);
-		}
-		
-		@Override
-		public void start() 
-		{
-			mediaPlayer.setLooping(true);
-			mediaPlayer.setVolume(volume, volume);
-			mediaPlayer.start();
-		}
-	}
-	
-	static private ArrayList<Sound> postSounds;
-	static private int postSoundsCount;
-	
-	static 
-	{
-		postSounds = new ArrayList<Sound>();
-	}
-	
-	static public void AddPostSound(Sound a)
-	{
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		if (postSounds.size() > postSoundsCount)
-		{
-			postSounds.set(postSoundsCount, a);
-			++postSoundsCount;
-		}
-		else
-		{
-			postSounds.add(a);
-			postSoundsCount = postSounds.size();
-		}
-	}
-	
-	static public void DeletePostSingleAnimation(int index)
-	{
-		--postSoundsCount;
-		postSounds.set(index, postSounds.get(postSoundsCount));
-		postSounds.set(postSoundsCount, null);
-	}
-	
-	static public void Update(long timeElapsed)
-	{
-		int i = 0;
-		while (i < postSoundsCount)
-		{
-			if (postSounds.get(i).isPlaying() == true)
-			{
-				++i;
-			}
-			else
-			{
-				DeletePostSingleAnimation(i);
-			}
-		}
-	}
-	
-	static private float GetVolumeFloat(int volume)
-	{
-		return (float) (1 - (Math.log(ZConstants.MIXER_VOLUME_MAX - volume) /
-				Math.log(ZConstants.MIXER_VOLUME_MAX)));
-	}
-}
Index: app/src/main/app/src/main/java/com/example/zetta/core/ZLogic.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/core/ZLogic.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/core/ZLogic.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,123 +0,0 @@
-package com.example.zetta.core;
-
-import com.example.zetta.ZConstants;
-import com.example.zetta.ZPrimitive;
-import com.example.zetta.entity.ZCell;
-import com.example.zetta.entity.ZBuff;
-import com.example.zetta.entity.ZEffect;
-import com.example.zetta.entity.ZItem;
-import com.example.zetta.entity.ZMachinery;
-import com.example.zetta.entity.ZMob;
-import com.example.zetta.entity.ZObject;
-
-public final class ZLogic 
-{	
-	static public void SetBuff(ZBuff buff)
-	{
-		//TODO:
-	}
-	
-	static public void ReleaseBuff(ZBuff buff)
-	{ 
-		//TODO:
-	}
-
-	static public void OnCollision(ZItem item)
-	{
-		int id = item.id;
-		ZCell[][] cells = ZGame.level.map.cells;
-		ZMob mob;
-		int i, j1, j, t, n, m, k;
-		ZPrimitive.Point2f position = new ZPrimitive.Point2f();
-		
-		if (item.buff != null)
-		{
-			ZLogic.SetBuff(item.buff);
-		}
-		item.destroy();
-		
-		switch(id)
-		{
-		case ZConstants.ITEM_ID_COIN:
-			--ZGame.level.map.coinsCount;
-			if (ZGame.level.map.coinsCount == 0)
-			{
-				ZGame.level.state = ZConstants.GAME_STATE_COMPLETED;
-				ZGame.level.map.destroy();
-			}
-			break;
-			
-		case ZConstants.ITEM_ID_BOMB1:
-			/*ZGraphics.explosion.modelSizeHalf.set(ZSettings.MAP_CELL_SIZE_RELATIVE.width * 3f / 2f, 
-					ZSettings.MAP_CELL_SIZE_RELATIVE.height * 3f / 2f);
-			ZGraphics.explosion.recalculateModelMatrix(item.physicsData.position, ZGame.level.map.graphicsData.tile.modelSizeHalf);
-			ZGraphics.isExplosion = true;*/
-			//TODO
-			i = (int)item.physicsData.position.y - 1; j1 = (int)item.physicsData.position.x - 1;
-			n = i + 3; m = j1 + 3;
-			i = Math.max(i, 0); j1 = Math.max(j1, 0);
-			n = Math.min(n, ZGame.level.map.size.height); m = Math.min(m, ZGame.level.map.size.width);
-			for (; i < n; ++i)
-			{
-				for (j = j1; j < m; ++j)
-				{
-					if (cells[i][j].object != null)
-					{
-						cells[i][j].object.destroy();					
-					}
-					position.set((float)j, (float)i);
-					for (t = 0, k = ZGame.level.map.mobsCount; t < k; ++t)
-					{
-						mob = ZGame.level.map.mobs.get(t);
-						if (mob.isDestroyed == false &&
-								position.distance(mob.physicsData.position) < 1f) //TODO 1f cellsOccupied?
-						{
-							mob.physicsData.health -= ZConstants.ITEM_BOMB_DAMAGE;
-							if (mob.physicsData.health <= 0)
-							{
-								mob.destroy();
-							}
-						}
-					}
-				}
-			}
-			break;
-		}
-	}
-	
-	static public void OnCollision(ZMob mob)
-	{
-		int id = mob.id;
-		switch(id)
-		{
-		
-		}
-	}
-	
-	static public void OnCollision(ZMachinery machinery)
-	{
-		int id = machinery.id;
-		switch(id)
-		{
-		
-		}
-	}
-	
-	static public void OnCollision(ZObject object)
-	{
-		int id = object.id;
-		switch(id)
-		{
-		
-		}
-	}
-	
-	static public void OnCollision(ZEffect effect)
-	{
-		int id = effect.id;
-		switch(id)
-		{
-		
-		}
-	}
-}
Index: app/src/main/app/build.gradle
===================================================================
--- app/src/main/app/build.gradle	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/build.gradle	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,23 +0,0 @@
-apply plugin: 'com.android.application'
-
-android {
-    compileSdkVersion 17
-    buildToolsVersion "21.1.2"
-
-    defaultConfig {
-        applicationId "com.example.zetta"
-        minSdkVersion 10
-        targetSdkVersion 10
-    }
-
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
-        }
-    }
-}
-
-dependencies {
-    compile 'com.android.support:support-v4:18.0.0'
-}
Index: app/src/main/app/src/main/java/com/example/zetta/entity/ZObject.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/entity/ZObject.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/entity/ZObject.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,100 +0,0 @@
-package com.example.zetta.entity;
-
-import com.example.zetta.core.ZGame;
-import com.example.zetta.core.ZGraphics;
-import com.example.zetta.core.ZPhysics;
-import com.example.zetta.core.ZGame.Identity;
-import com.example.zetta.core.ZGraphics.Image;
-
-public class ZObject extends Identity
-{
-	public final class GraphicsData extends ZGraphics.GraphicsData
-	{
-		public Image image;
-		
-		public GraphicsData()
-		{
-			super();
-			image = new Image();
-		}
-		
-		public GraphicsData(Image _image)
-		{
-			super();
-			image = new Image(_image);
-		}
-		
-		public GraphicsData(GraphicsData d)
-		{
-			super(d);
-			image = new Image(d.image);
-		}
-
-		@Override
-		public void draw()
-		{
-			image.draw();			
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			image.setModelPosition(physicsData.position);
-			image.setModelSizeHalfMapCell();
-			image.update(timeElapsed);
-		}
-	}
-
-	public final class PhysicsData extends ZPhysics.PhysicsData
-	{
-		public int direction, damage;
-		
-		public PhysicsData()
-		{
-			super();
-		}
-		
-		public PhysicsData(PhysicsData d)
-		{
-			super(d);
-			direction = d.direction;
-			damage = d.damage;
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			
-		}
-	}
-	
-	public GraphicsData graphicsData;
-	public PhysicsData physicsData;
-	
-	public ZObject()
-	{
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-	}
-	
-	public ZObject(int id)
-	{
-		super(id);
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-	}
-	
-	public ZObject(ZObject o)
-	{
-		super(o);
-		graphicsData = new GraphicsData(o.graphicsData);
-		physicsData = new PhysicsData(o.physicsData);
-	}
-
-	@Override
-	public void onDestroy() 
-	{
-		ZPhysics.wasObjectDestroyed = true;
-		ZGame.level.map.cells[(int)physicsData.position.y][(int)physicsData.position.x].object = null;
-	}
-}
Index: app/src/main/app/src/main/java/com/example/zetta/ZStatistics.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/ZStatistics.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/ZStatistics.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,6 +0,0 @@
-package com.example.zetta;
-
-public final class ZStatistics 
-{
-
-}
Index: app/src/main/app/src/main/java/com/example/zetta/ZGenerator.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/ZGenerator.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/ZGenerator.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,8 +0,0 @@
-package com.example.zetta;
-
-import java.util.Random;
-
-public final class ZGenerator 
-{
-	static final public Random randomizer = new Random();
-}
Index: app/src/main/app/src/main/java/com/example/zetta/entity/ZBuff.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/entity/ZBuff.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/entity/ZBuff.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,109 +0,0 @@
-package com.example.zetta.entity;
-
-import com.example.zetta.core.ZGraphics;
-import com.example.zetta.core.ZLogic;
-import com.example.zetta.core.ZPhysics;
-import com.example.zetta.core.ZGame.Identity;
-import com.example.zetta.core.ZGraphics.Image;
-
-public final class ZBuff extends Identity
-{
-	public final class GraphicsData extends ZGraphics.GraphicsData
-	{
-		public Image icon;
-		
-		public GraphicsData()
-		{
-			super();	
-			icon = new Image();
-		}
-		
-		public GraphicsData(Image _icon)
-		{
-			super();
-			icon = new Image(_icon);
-		}
-		
-		public GraphicsData(GraphicsData d)
-		{
-			super(d);
-			icon = new Image(d.icon);
-		}
-
-		@Override
-		public void draw() 
-		{
-			icon.draw();
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			icon.setModelPosition(physicsData.position);
-			icon.setModelSizeHalfGuiCell();
-			icon.update(timeElapsed);
-		}
-	}
-	
-	public final class PhysicsData extends ZPhysics.PhysicsData
-	{
-		public long timeDestroying, time;
-		
-		public PhysicsData()
-		{
-			super();
-		}
-		
-		public PhysicsData(PhysicsData d)
-		{
-			super(d);
-			timeDestroying = d.timeDestroying;
-			time = d.time;
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			time += timeElapsed;
-			if (time >= timeDestroying)
-			{
-				ZLogic.ReleaseBuff(ZBuff.this);
-				destroy();
-			}
-		}
-	}
-	
-	public int count, countMax;
-	
-	public GraphicsData graphicsData;
-	public PhysicsData physicsData;
-	
-	public ZBuff()
-	{
-		super();
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-	}
-	
-	public ZBuff(int id)
-	{
-		super(id);
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-	}
-	
-	public ZBuff(ZBuff b)
-	{
-		super(b);
-		count = b.count;
-		countMax = b.countMax;
-		graphicsData = new GraphicsData(b.graphicsData);
-		physicsData = new PhysicsData(b.physicsData);
-	}
-
-	@Override
-	public void onDestroy() 
-	{
-		// TODO Auto-generated method stub
-	}
-}
Index: app/src/main/app/src/main/java/com/example/zetta/core/ZPhysics.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/core/ZPhysics.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/core/ZPhysics.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,218 +0,0 @@
-package com.example.zetta.core;
-
-import java.util.ArrayList;
-
-import com.example.zetta.ZPrimitive.Point2f;
-import com.example.zetta.core.ZGame.IUpdatable;
-import com.example.zetta.entity.ZEffect;
-import com.example.zetta.entity.ZItem;
-import com.example.zetta.entity.ZLevel;
-import com.example.zetta.entity.ZMachinery;
-import com.example.zetta.entity.ZMap;
-import com.example.zetta.entity.ZMob;
-import com.example.zetta.entity.ZObject;
-import com.example.zetta.entity.ZPlayer;
-
-public final class ZPhysics 
-{
-	//TODO
-	/*static public class Explosion
-	{
-		public Explosion()
-		{
-		explosion.id = 1;
-		explosion.textureSize.height = 1f;
-		explosion.textureSize.width = 1f / 27f;
-		explosion.isPlaying = false;
-		explosion.textureCoordinatesInitial = new Point2f[]{new Point2f(0, 0)};
-		explosion.setMeshes(ZGame.level.map.graphicsData.image.modelMesh,
-				ZGame.level.map.graphicsData.image.textureMesh);
-		explosion.state = 0;
-		explosion.statesCount = 1;
-		explosion.stepsCount = new byte[]{27};
-		explosion.step = 0;
-		explosion.stepSwitchTime = (int)(525f / 27f);
-		explosion.texturePosition.set(0, 0);
-		
-		
-		//TODO delete
-		if (isExplosion == true)
-		{
-			explosion.time += timeElapsed;
-			if (explosion.time > explosion.stepSwitchTime)
-			{
-				explosion.step += explosion.time / explosion.stepSwitchTime;
-				explosion.time %= explosion.stepSwitchTime;
-				
-				if (explosion.step >= explosion.stepsCount[explosion.state])
-				{
-					isExplosion = false;
-					explosion.step = 0;
-				}
-			}
-			explosion.texturePosition.set(explosion.textureCoordinatesInitial[explosion.state]);
-			explosion.texturePosition.add(explosion.step * explosion.textureSize.width, 0);
-			explosion.recalculateTextureMatrix();
-			explosion.prepareMeshes();
-		}
-		//;
-		}
-	}*/
-	
-	static public abstract class PhysicsData implements IUpdatable
-	{
-		public Point2f position;
-
-		public PhysicsData()
-		{
-			position = new Point2f();
-		}
-		
-		public PhysicsData(PhysicsData d)
-		{
-			position = new Point2f(d.position);	
-		}
-	}
-	
-	static public boolean wasMobDestroyed, wasItemDestroyed, wasObjectDestroyed,
-		wasMachineryDestroyed, wasEffectDestroyed;
-	
-	static private ZPlayer player;
-	static private ZMap map;
-	static private ArrayList<ZMob> mobs;
-	static private ArrayList<ZEffect> effects;
-	static private ArrayList<ZItem> items;
-	static private ArrayList<ZMachinery> machineries;
-	static private ArrayList<ZObject> objects;
-	
-	static public void SetScene(ZLevel level)
- 	{
- 		player = level.player;
- 		map = level.map;
- 		
- 		effects = level.map.effects;
- 		mobs = level.map.mobs;
- 		items = level.map.items;
- 		objects = level.map.objects;
- 		machineries = level.map.machineries;
- 	}
-	
-	static public void Update(long timeElapsed)
-	{	
-		wasObjectDestroyed = wasMobDestroyed = wasMachineryDestroyed = wasItemDestroyed = false;
-		int i, n;
-		
-		for (i = 0, n = map.machineriesCount; i < n; ++i)
-		{
-			if (machineries.get(i).isDestroyed == false)
-			{
-				machineries.get(i).physicsData.update(timeElapsed);
-			}
-		}
-				
-		player.physicsData.update(timeElapsed);	
-		
-		for (i = 0, n = map.mobsCount; i < n; ++i)
-		{
-			if (mobs.get(i).isDestroyed == false)
-			{
-				mobs.get(i).physicsData.update(timeElapsed);
-			}
-		}
-		
-		if (wasItemDestroyed == true)
-		{
-			i = 0;
-			n = map.itemsCount;
-			while (i < n)
-			{
-				if (items.get(i).isDestroyed == false) 
-				{
-					++i;
-				}
-				else
-				{
-					n = --map.itemsCount;
-					items.set(i, items.get(n));
-					items.set(n, null);
-				}
-			}
-		}
-		
-		if (wasMachineryDestroyed == true)
-		{
-			i = 0;
-			n = map.machineriesCount;
-			while (i < n)
-			{
-				if (machineries.get(i).isDestroyed == false) 
-				{
-					++i;
-				}
-				else
-				{
-					n = --map.machineriesCount;
-					machineries.set(i, machineries.get(n));
-					machineries.set(n, null);
-				}
-			}
-		}
-		
-		if (wasMobDestroyed == true)
-		{
-			i = 0;
-			n = map.mobsCount;
-			while (i < n)
-			{
-				if (mobs.get(i).isDestroyed == false) 
-				{
-					++i;
-				}
-				else
-				{
-					n = --map.mobsCount;
-					mobs.set(i, mobs.get(n));
-					mobs.set(n, null);
-				}
-			}
-		}
-		
-		if (wasObjectDestroyed == true)
-		{
-			i = 0;
-			n = map.objectsCount;
-			while (i < n)
-			{
-				if (objects.get(i).isDestroyed == false) 
-				{
-					++i;
-				}
-				else
-				{
-					n = --map.objectsCount;
-					objects.set(i, objects.get(n));
-					objects.set(n, null);
-				}
-			}
-		}
-		
-		if (wasEffectDestroyed == true)
-		{
-			i = 0;
-			n = map.effectsCount;
-			while (i < n)
-			{
-				if (effects.get(i).isDestroyed == false) 
-				{
-					++i;
-				}
-				else
-				{
-					n = --map.effectsCount;
-					effects.set(i, effects.get(n));
-					effects.set(n, null);
-				}
-			}
-		}
-	}
-}
Index: app/src/main/app/src/main/java/com/example/zetta/entity/ZPlayer.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/entity/ZPlayer.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/entity/ZPlayer.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,422 +0,0 @@
-package com.example.zetta.entity;
-
-import java.util.ArrayList;
-
-import com.example.zetta.ZConstants;
-import com.example.zetta.core.ZGame;
-import com.example.zetta.core.ZLogic;
-import com.example.zetta.core.ZTouchScreen;
-
-public final class ZPlayer extends ZCreature 
-{
-	public final class GraphicsData extends ZCreature.GraphicsData
-	{
-		public GraphicsData()
-		{
-			super();
-		}
-		
-		public GraphicsData(GraphicsData d)
-		{
-			super(d);
-		}
-
-		@Override
-		public void draw() 
-		{
-			animationOnMoving.draw();
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			if (physicsData.isMoving == false)
-			{
-				animationOnMoving.zeroStep();
-			}
-			animationOnMoving.setPlaying(physicsData.isMoving);
-			animationOnMoving.setState(physicsData.direction);
-			animationOnMoving.setModelPosition(physicsData.position);
-			animationOnMoving.setModelSizeHalfMapCell();
-			animationOnMoving.update(timeElapsed);
-		}
-	}
-
-	public final class PhysicsData extends ZCreature.PhysicsData
-	{
-		public boolean hasInertial;
-		
-		public PhysicsData()
-		{
-			super();
-		}
-		
-		public PhysicsData(boolean _isInertial)
-		{
-			super();
-			hasInertial = _isInertial;
-		}
-		
-		public PhysicsData(PhysicsData d)
-		{
-			super(d);
-			hasInertial = d.hasInertial;
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			int i, n;
-			ZMob mob;
-			ZCell cell;
-			
-			for (i = 0, n = buffs.size(); i < n; ++i)
-			{
-				buffs.get(i).physicsData.update(timeElapsed);
-			}
-			
-			isMoving = ZTouchScreen.GetIsPressing();
-			direction = ZTouchScreen.GetDirection();			
-			
-			if (isMoving == true)
-			{
-				movementVector.set(ZConstants.DIRECTION_UNIT_VECTORS[direction]);
-				movementVector.multiply(speed * timeElapsed);
-				setPosition(movementVector.x + position.x,
-						movementVector.y + position.y);
-				
-				if (position.x - (sizeHalf.width - 0.5f) < 0)
-				{
-					position.x = (sizeHalf.width - 0.5f) + ZConstants.MAP_CELL_PRECISION;
-				}
-				else //////TODO :: 0.5f!!!!!!!
-					if (position.x - (0.5f - sizeHalf.width) > (float)ZGame.level.map.size.width - 1)
-					{
-						position.x = (float)ZGame.level.map.size.width - 1 + (0.5f - sizeHalf.width) - ZConstants.MAP_CELL_PRECISION;
-					}
-				if (position.y - (sizeHalf.height - 0.5f) < 0)
-				{
-					position.y = (sizeHalf.height - 0.5f) + ZConstants.MAP_CELL_PRECISION;
-				}
-				else
-					if (position.y - (0.5f - sizeHalf.height) > (float)ZGame.level.map.size.height - 1)
-					{
-						position.y = (float)ZGame.level.map.size.height - 1 + (0.5f - sizeHalf.height) - ZConstants.MAP_CELL_PRECISION;
-					}
-				setCellsOccupied();
-				
-				//TODO: rewrite object collision
-				/*for (i = 0, n = cellsOccupiedCount; i < n && 
-					ZGame.level.map.isDestroyed == false; ++i)
-				{
-					cell = ZGame.level.map.cells[(int)cellsOccupied[i].x][(int)cellsOccupied[i].y];		
-					if (cell.object != null && cell.object.isDestroyed == false)
-					{
-						ZLogic.OnCollision(cell.object);
-						switch(direction)
-						{
-						case ZConstants.DIRECTION_UP:
-							position.set(position.x, cellsOccupied[i].x - (0.5f + size.height));
-							break;
-							
-						case ZConstants.DIRECTION_DOWN:
-							position.set(position.x, cellsOccupied[i].x + (0.5f + size.height));
-							break; //////TODO :: 0.5f!!!!!!!
-							
-						case ZConstants.DIRECTION_RIGHT:
-							position.set(cellsOccupied[i].y - (0.5f + size.width), position.y);
-							break;
-							
-						case ZConstants.DIRECTION_LEFT:
-							position.set(cellsOccupied[i].y + (0.5f + size.width), position.y);
-							break;
-						}
-						setCellsOccupied();
-						break;
-					}
-				}*/
-				
-				/////TODO wtf collision?
-				boolean wasEnclosed = false;
-				for (i = 0; i < cellsOccupiedCount && 
-					ZGame.level.map.isDestroyed == false; ++i)
-				{
-					cell = ZGame.level.map.cells[(int)cellsOccupied[i].x][(int)cellsOccupied[i].y];		
-					if (cell.object != null && cell.object.isDestroyed == false)
-					{
-						/*if (0.5f + size.width <= Math.abs(position.x - cell.object.physicsData.position.x) &&
-								0.5f + size.height <= Math.abs(position.y - cell.object.physicsData.position.y))
-						{
-							--cellsOccupiedCount;
-							cellsOccupied[i].set(cellsOccupied[cellsOccupiedCount]);
-						}
-						else
-						{*/
-						ZLogic.OnCollision(cell.object);
-						switch(direction)
-						{
-						case ZConstants.DIRECTION_UP:
-							position.set(position.x, cellsOccupied[i].x - (0.5f + sizeHalf.height) - ZConstants.MAP_CELL_PRECISION);
-							break;
-							
-						case ZConstants.DIRECTION_DOWN:
-							position.set(position.x, cellsOccupied[i].x + (0.5f + sizeHalf.height) + ZConstants.MAP_CELL_PRECISION);
-							break; //////TODO :: 0.5f!!!!!!!
-							
-						case ZConstants.DIRECTION_RIGHT:
-							position.set(cellsOccupied[i].y - (0.5f + sizeHalf.width) - ZConstants.MAP_CELL_PRECISION, position.y);
-							break;
-							
-						case ZConstants.DIRECTION_LEFT:
-							position.set(cellsOccupied[i].y + (0.5f + sizeHalf.width) + ZConstants.MAP_CELL_PRECISION, position.y);
-							break;
-						}
-						setCellsOccupied();
-						wasEnclosed = true;
-						break;
-					}
-				}
-				
-				//help to pass objects
-				if (wasEnclosed == true && cellsOccupiedCount == 2)
-				{
-					long timeElapsedAfterMove = timeElapsed - 
-						(long)((Math.abs(position.x - positionPrevious.x) +
-						Math.abs(position.y - positionPrevious.y)) / speed);
-					for (i = 0; i < cellsOccupiedCount && 
-						ZGame.level.map.isDestroyed == false; ++i)
-					{
-						switch(direction)
-						{
-						case ZConstants.DIRECTION_UP:
-							cell = ZGame.level.map.cells[(int)cellsOccupied[i].x + 1][(int)cellsOccupied[i].y];	
-							break;
-							
-						case ZConstants.DIRECTION_DOWN:
-							cell = ZGame.level.map.cells[(int)cellsOccupied[i].x - 1][(int)cellsOccupied[i].y];	
-							break; //////TODO :: 0.5f!!!!!!!
-							
-						case ZConstants.DIRECTION_RIGHT:
-							cell = ZGame.level.map.cells[(int)cellsOccupied[i].x][(int)cellsOccupied[i].y + 1];	
-							break;
-							
-						case ZConstants.DIRECTION_LEFT:
-							cell = ZGame.level.map.cells[(int)cellsOccupied[i].x][(int)cellsOccupied[i].y - 1];	
-							break;
-							
-						default: 
-							cell = null;
-							break;
-						}
-						
-						if ((cell.object == null || cell.object.isDestroyed == true) &&
-								(cell.machinery == null || cell.machinery.isDestroyed == true))
-						{
-							if (direction == ZConstants.DIRECTION_UP ||
-									direction == ZConstants.DIRECTION_DOWN)
-								if (cellsOccupied[i].y < position.x)
-								{
-									movementVector.set(ZConstants.DIRECTION_UNIT_VECTORS[ZConstants.DIRECTION_LEFT]);
-									movementVector.multiply(speed * timeElapsedAfterMove);
-									position.set(movementVector.x + position.x,
-											movementVector.y + position.y);
-									if (position.x < cellsOccupied[i].y + 0.5f - sizeHalf.width)
-									{
-										position.x = cellsOccupied[i].y + 0.5f - sizeHalf.width
-											- ZConstants.MAP_CELL_PRECISION;
-									}
-									else
-									{
-										direction = ZConstants.DIRECTION_LEFT;
-									}
-								}
-								else
-								{
-									movementVector.set(ZConstants.DIRECTION_UNIT_VECTORS[ZConstants.DIRECTION_RIGHT]);
-									movementVector.multiply(speed * timeElapsedAfterMove);
-									position.set(movementVector.x + position.x,
-											movementVector.y + position.y);
-									if (position.x > cellsOccupied[i].y - 0.5f + sizeHalf.width)
-									{
-										position.x = cellsOccupied[i].y - 0.5f + sizeHalf.width
-											+ ZConstants.MAP_CELL_PRECISION;
-									}
-									else
-									{
-										direction = ZConstants.DIRECTION_RIGHT;
-									}
-								}
-							else //(direction == ZConstants.DIRECTION_LEFT ||
-								//direction == ZConstants.DIRECTION_RIGHT)
-							{
-								if (cellsOccupied[i].x < position.y)
-								{
-									movementVector.set(ZConstants.DIRECTION_UNIT_VECTORS[ZConstants.DIRECTION_DOWN]);
-									movementVector.multiply(speed * timeElapsedAfterMove);
-									position.set(movementVector.x + position.x,
-											movementVector.y + position.y);
-									if (position.y < cellsOccupied[i].x + 0.5f - sizeHalf.height)
-									{
-										position.y = cellsOccupied[i].x + 0.5f - sizeHalf.height
-											- ZConstants.MAP_CELL_PRECISION;
-									}
-									else
-									{
-										direction = ZConstants.DIRECTION_DOWN;
-									}
-								}
-								else
-								{
-									movementVector.set(ZConstants.DIRECTION_UNIT_VECTORS[ZConstants.DIRECTION_UP]);
-									movementVector.multiply(speed * timeElapsedAfterMove);
-									position.set(movementVector.x + position.x,
-											movementVector.y + position.y);
-									if (position.y > cellsOccupied[i].x - 0.5f + sizeHalf.width)
-									{
-										position.y = cellsOccupied[i].x - 0.5f + sizeHalf.width
-											+ ZConstants.MAP_CELL_PRECISION;
-									}
-									else
-									{
-										direction = ZConstants.DIRECTION_UP;
-									}
-								}
-							}
-							setCellsOccupied();
-							break;
-						}
-					}
-				}
-				////
-
-				for (i = 0, n = ZGame.level.map.mobsCount; i < n &&
-					ZGame.level.map.isDestroyed == false; ++i)
-				{
-					mob = ZGame.level.map.mobs.get(i);
-					if (mob.isDestroyed == false)
-					{
-						if (position.distance(mob.physicsData.position) < 1f) //TODO 1f
-						{
-							ZLogic.OnCollision(mob);
-							if (mob.physicsData.isHostile == true)
-							{
-								health -= mob.physicsData.damage;
-								if (health <= 0)
-								{
-									ZGame.level.state = ZConstants.GAME_STATE_FAILED;
-								}
-							}
-						}
-					}
-				}
-				
-				for (i = 0, n = cellsOccupiedCount; i < n && 
-					ZGame.level.map.isDestroyed == false; ++i)
-				{
-					cell = ZGame.level.map.cells[(int)cellsOccupied[i].x][(int)cellsOccupied[i].y];
-					
-					if (cell.item != null && cell.item.isDestroyed == false)
-					{
-						ZLogic.OnCollision(cell.item);
-					}
-					
-					if (cell.machinery != null && cell.machinery.isDestroyed == false)
-					{
-						ZLogic.OnCollision(cell.machinery);
-						if (cell.machinery.physicsData.step != 0)
-						{
-							health -= cell.machinery.physicsData.damage;
-							if (health <= 0)
-							{
-								ZGame.level.state = ZConstants.GAME_STATE_FAILED;
-								ZGame.level.map.destroy();
-							}
-						}
-					}
-				}
-			}
-			else // isMoving == false
-			{
-				for (i = 0, n = cellsOccupiedCount; i < n && 
-					ZGame.level.map.isDestroyed == false; ++i)
-				{
-					cell = ZGame.level.map.cells[(int)cellsOccupied[i].x][(int)cellsOccupied[i].y];
-					if (cell.machinery != null && cell.machinery.isDestroyed == false)
-					{
-						ZLogic.OnCollision(cell.machinery);
-						if (cell.machinery.physicsData.step != 0)
-						{
-							health -= cell.machinery.physicsData.damage;
-							if (health <= 0)
-							{
-								ZGame.level.state = ZConstants.GAME_STATE_FAILED;
-								ZGame.level.map.destroy();
-							}
-						}
-					}
-				}
-				
-				for (i = 0, n = ZGame.level.map.mobsCount; i < n &&
-					ZGame.level.map.isDestroyed == false; ++i)
-				{
-					mob = ZGame.level.map.mobs.get(i);
-					if (mob.isDestroyed == false)
-					{
-						if (position.distance(mob.physicsData.position) < 1f) //TODO 1f
-						{
-							ZLogic.OnCollision(mob);
-							if (mob.physicsData.isHostile == true)
-							{
-								health -= mob.physicsData.damage;
-								if (health <= 0)
-								{
-									ZGame.level.state = ZConstants.GAME_STATE_FAILED;
-									ZGame.level.map.destroy();
-								}
-							}
-						}
-					}
-				}
-			}
-		}
-	}
-	
-	public ArrayList<ZBuff> buffs;
-	public ZScore score;
-	public GraphicsData graphicsData;
-	public PhysicsData physicsData;
-	
-	public ZPlayer()
-	{
-		super();
-		buffs = new ArrayList<ZBuff>();
-		score = new ZScore();
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-	}
-	
-	public ZPlayer(int id)
-	{
-		super(id);
-		buffs = new ArrayList<ZBuff>();
-		score = new ZScore();
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-	}
-	
-	public ZPlayer(ZPlayer p)
-	{
-		super(p);
-		buffs = new ArrayList<ZBuff>(p.buffs);
-		score = new ZScore(p.score);
-		graphicsData = new GraphicsData(p.graphicsData);
-		physicsData = new PhysicsData(p.physicsData);
-	}
-
-	@Override
-	public void onDestroy() 
-	{
-		// TODO Auto-generated method stub
-		
-	}
-}
Index: app/src/main/app/src/main/res/raw/maps_lot_objects.txt
===================================================================
--- app/src/main/app/src/main/res/raw/maps_lot_objects.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/raw/maps_lot_objects.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,103 +0,0 @@
-// id - 1
-0
-30
-7
-8
-// items
-5
-2
-1
-4
-4
-2
-3
-0
-1
-2
-2
-2
-2
-4
-2
-5
-2
-// objects
-16
-1
-3
-3
-1
-2
-3
-1
-4
-2
-1
-4
-3
-1
-0
-0
-1
-1
-0
-1
-0
-1
-1
-0
-7
-1
-0
-6
-1
-1
-7
-1
-6
-7
-1
-5
-7
-1
-6
-6
-1
-6
-0
-1
-5
-0
-1
-6
-1
-// machineries
-1
-1
-2
-0
-// mobs
-6
-1
-5
-1
-2
-3
-2
-3
-0
-3
-4
-1
-6
-6
-4
-7
-7
-6
-4
-// entities end
-0
-0
-1
-2
\ No newline at end of file
Index: app/src/main/app/src/main/java/com/example/zetta/core/ZAI.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/core/ZAI.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/core/ZAI.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,169 +0,0 @@
-package com.example.zetta.core;
-
-import com.example.zetta.ZConstants;
-import com.example.zetta.ZGenerator;
-import com.example.zetta.ZLog;
-import com.example.zetta.ZPrimitive;
-import com.example.zetta.ZPrimitive.Point2f;
-import com.example.zetta.core.ZGame.IUpdatable;
-import com.example.zetta.entity.ZMap;
-import com.example.zetta.entity.ZMob;
-import com.example.zetta.entity.ZPlayer;
-
-public class ZAI 
-{
-	static public abstract class AIData implements IUpdatable
-	{
-		public Point2f positionNext;
-		public long timeWaiting;
-		
-		public AIData()
-		{			
-			positionNext = new Point2f();
-			timeWaiting = GetTimeWaiting(); 
-		}
-		
-		public AIData(AIData d)
-		{			
-			positionNext = new Point2f(d.positionNext);
-			timeWaiting = d.timeWaiting; 
-		}
-	}
-	
-	static public void ComputeNextPosition(ZMob mob)
-	{
-		ZPrimitive.Point2f wayPosition = new ZPrimitive.Point2f(); //TODO mm, objects
-		float distanceMin = -1f, distance;
-		boolean distanceMinWasFound = false;
-		ZMap map = ZGame.level.map;
-		ZPlayer player = ZGame.level.player;
-		int[] directions = new int[4]; //TODO mm, objects
-		int directionsCount = 0, directionIndex = 0, wayDistanceMax, wayDistance;
-		
-		if (mob.aiData.isPursuing == true)
-		{			
-			mob.aiData.timeWaiting = 0;
-			for (int i = 0, n = ZConstants.DIRECTION_UNIT_VECTORS.length; i < n; ++i)
-			{
-				wayPosition.set(mob.physicsData.position);
-				wayPosition.add(ZConstants.DIRECTION_UNIT_VECTORS[i]);
-				if (wayPosition.x >= 0 && wayPosition.y >= 0 && wayPosition.x < map.size.width && 
-						wayPosition.y < map.size.height &&
-						map.cells[(int)(wayPosition.y)][(int)(wayPosition.x)].object == null)
-				{
-					distance = wayPosition.distance(player.physicsData.position);
-					if (distanceMinWasFound == false)
-					{
-						distanceMinWasFound = true;
-						distanceMin = distance;
-						directionIndex = i;
-					}
-					else
-						if (distance < distanceMin)
-						{
-							distanceMin = distance;
-							directionIndex = i;
-						}
-				}
-			}
-			
-			if (distanceMinWasFound == false)
-			{
-				ZLog.d(ZLog.TAG_AI, "no way to pursue the player - mob(" + 
-						mob.physicsData.position.x + "; " + mob.physicsData.position.y + ")");
-				return; //TODO how can I get here?
-			}
-			else
-			{
-				wayPosition.set(mob.physicsData.position);
-				wayPosition.add(ZConstants.DIRECTION_UNIT_VECTORS[directionIndex]);
-				mob.aiData.positionNext.set(wayPosition);
-			}
-			
-			mob.physicsData.direction = directionIndex;
-			mob.physicsData.isMoving = true;
-		}
-		else
-		{
-			for (int i = 0, n = ZConstants.DIRECTION_UNIT_VECTORS.length; i < n; ++i)
-			{
-				wayPosition.set(mob.physicsData.position);
-				wayPosition.add(ZConstants.DIRECTION_UNIT_VECTORS[i]);
-				if (wayPosition.x >= 0 && wayPosition.y >= 0 && wayPosition.x < map.size.width && 
-						wayPosition.y < map.size.height &&
-						map.cells[(int)(wayPosition.y)][(int)(wayPosition.x)].object == null)
-				{
-					directions[directionsCount] = (int)i;
-					++directionsCount;
-				}
-			}
-			directionIndex = ZGenerator.randomizer.nextInt(directionsCount);
-			wayPosition.set(mob.physicsData.position);
-			wayPosition.add(ZConstants.DIRECTION_UNIT_VECTORS[directions[directionIndex]]);
-			wayDistanceMax = 1;
-			while (wayPosition.x >= 0 && wayPosition.y >= 0 &&
-					wayPosition.x < map.size.width && wayPosition.y < map.size.height &&
-					wayDistanceMax <= mob.physicsData.detectionDistance && 
-					map.cells[(int)(wayPosition.y)][(int)(wayPosition.x)].object == null)
-			{
-				++wayDistanceMax;
-				wayPosition.add(ZConstants.DIRECTION_UNIT_VECTORS[directions[directionIndex]]);
-			}
-			
-			wayDistance = ZGenerator.randomizer.nextInt(wayDistanceMax);
-			if (wayDistance == 0 && ZGenerator.randomizer.nextBoolean() == true)
-			{
-				wayDistance = 1;
-			}
-			if (wayDistance != 0)
-			{
-				wayPosition.set(ZConstants.DIRECTION_UNIT_VECTORS[directions[directionIndex]]);
-				wayPosition.multiply((float)wayDistance);
-				wayPosition.add(mob.physicsData.position);
-				mob.aiData.positionNext.set(wayPosition);
-				mob.physicsData.direction = directions[directionIndex];
-				mob.physicsData.isMoving = true;
-			}
-			else
-			{
-				mob.aiData.timeWaiting = GetTimeWaiting();
-			}
-		}
-	}
-	
-	static public void ComputeNearestPosition(ZMob mob)
-	{
-		switch (mob.physicsData.direction)
-		{
-		case ZConstants.DIRECTION_UP:
-			mob.aiData.positionNext.set(
-					(int)mob.physicsData.position.x,
-					(float)Math.ceil((double)mob.physicsData.position.y));
-			break;
-			
-		case ZConstants.DIRECTION_RIGHT:
-			mob.aiData.positionNext.set(
-					(float)Math.ceil((double)mob.physicsData.position.x),
-					(int)mob.physicsData.position.y);
-			break;
-			
-		case ZConstants.DIRECTION_DOWN:
-			mob.aiData.positionNext.set(
-					(int)mob.physicsData.position.x,
-					(int)mob.physicsData.position.y);
-			break;
-			
-		case ZConstants.DIRECTION_LEFT:
-			mob.aiData.positionNext.set(
-					(int)mob.physicsData.position.x,
-					(int)mob.physicsData.position.y);
-			break;
-		}
-	}
-	
-	static public long GetTimeWaiting()
-	{
-		return (long)(ZConstants.MOB_TIME_WAITING_AVERAGE  - ZConstants.MOB_TIME_WAITING_DELTA + 
-				ZGenerator.randomizer.nextInt((int)ZConstants.MOB_TIME_WAITING_DELTA << 1));
-	}
-}
Index: app/src/main/app/build/generated/source/r/debug/com/example/zetta/R.java
===================================================================
--- app/src/main/app/build/generated/source/r/debug/com/example/zetta/R.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/build/generated/source/r/debug/com/example/zetta/R.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,75 +0,0 @@
-/* AUTO-GENERATED FILE.  DO NOT MODIFY.
- *
- * This class was automatically generated by the
- * aapt tool from the resource data it found.  It
- * should not be modified by hand.
- */
-
-package com.example.zetta;
-
-public final class R {
-    public static final class attr {
-    }
-    public static final class dimen {
-        public static final int activity_horizontal_margin=0x7f050000;
-        public static final int activity_vertical_margin=0x7f050001;
-    }
-    public static final class drawable {
-        public static final int bomb=0x7f020000;
-        public static final int coin=0x7f020001;
-        public static final int explosion=0x7f020002;
-        public static final int grid=0x7f020003;
-        public static final int highlight=0x7f020004;
-        public static final int ic_launcher=0x7f020005;
-        public static final int machineries=0x7f020006;
-        public static final int map=0x7f020007;
-        public static final int mobs=0x7f020008;
-        public static final int mobsflying=0x7f020009;
-        public static final int object=0x7f02000a;
-        public static final int player=0x7f02000b;
-    }
-    public static final class id {
-        public static final int action_settings=0x7f090002;
-        public static final int calendarView1=0x7f090000;
-        public static final int datePicker1=0x7f090001;
-    }
-    public static final class layout {
-        public static final int activity_game=0x7f030000;
-        public static final int main_layout=0x7f030001;
-    }
-    public static final class menu {
-        public static final int game=0x7f080000;
-    }
-    public static final class raw {
-        public static final int coin=0x7f040000;
-        public static final int effects=0x7f040001;
-        public static final int explosion=0x7f040002;
-        public static final int items=0x7f040003;
-        public static final int machineries=0x7f040004;
-        public static final int maps=0x7f040005;
-        public static final int maps_common=0x7f040006;
-        public static final int maps_lot_bombs=0x7f040007;
-        public static final int maps_lot_objects=0x7f040008;
-        public static final int mobs=0x7f040009;
-        public static final int music=0x7f04000a;
-        public static final int objects=0x7f04000b;
-        public static final int players=0x7f04000c;
-    }
-    public static final class string {
-        public static final int action_settings=0x7f060000;
-        public static final int app_name=0x7f060001;
-        public static final int hello_world=0x7f060002;
-    }
-    public static final class style {
-        /** 
-            Theme customizations available in newer API levels can go in
-            res/values-vXX/styles.xml, while customizations related to
-            backward-compatibility can go here.
-        
-         */
-        public static final int AppBaseTheme=0x7f070000;
-        /**  All customizations that are NOT specific to a particular API-level can go here. 
-         */
-        public static final int AppTheme=0x7f070001;
-    }
-}
Index: app/src/main/app/src/main/res/raw/maps_lot_bombs.txt
===================================================================
--- app/src/main/app/src/main/res/raw/maps_lot_bombs.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/raw/maps_lot_bombs.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,100 +0,0 @@
-// id - 1
-0
-30
-7
-8
-// items
-16
-3
-1
-4
-4
-2
-3
-0
-1
-2
-2
-2
-2
-4
-2
-5
-2
-1
-6
-7
-2
-0
-1
-2
-1
-0
-2
-2
-0
-2
-2
-1
-2
-3
-1
-2
-4
-0
-2
-4
-1
-2
-5
-0
-2
-6
-0
-2
-6
-1
-// objects
-4
-1
-3
-3
-1
-2
-3
-1
-4
-2
-1
-4
-3
-// machineries
-0
-// mobs
-7
-1
-5
-1
-2
-3
-2
-3
-0
-3
-4
-1
-6
-5
-0
-0
-6
-4
-7
-7
-6
-4
-// entities end
-0
-0
-1
-2
\ No newline at end of file
Index: app/src/main/app/src/main/java/com/example/zetta/entity/ZMob.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/entity/ZMob.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/entity/ZMob.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,185 +0,0 @@
-package com.example.zetta.entity;
-
-import com.example.zetta.ZConstants;
-import com.example.zetta.core.ZAI;
-import com.example.zetta.core.ZGame;
-import com.example.zetta.core.ZPhysics;
-
-public final class ZMob extends ZCreature 
-{
-	public class GraphicsData extends ZCreature.GraphicsData
-	{
-		public GraphicsData()
-		{
-			super();
-		}
-		
-		public GraphicsData(GraphicsData d)
-		{
-			super(d);
-		}
-
-		@Override
-		public void draw() 
-		{
-			animationOnMoving.draw();
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			if (physicsData.isMoving == false)
-			{
-				animationOnMoving.zeroStep();
-			}
-			animationOnMoving.setPlaying(physicsData.isMoving);
-			animationOnMoving.setState(physicsData.direction);
-			animationOnMoving.setModelPosition(physicsData.position);
-			animationOnMoving.setModelSizeHalfMapCell();
-			animationOnMoving.update(timeElapsed);
-		}
-	}
-
-	public class PhysicsData extends ZCreature.PhysicsData
-	{
-		public int damage, detectionDistance;
-		public boolean isFlying = false, isImmortal = false, isSpectral = false, isHostile = true;
-		
-		public PhysicsData()
-		{
-			super();
-		}
-		
-		public PhysicsData(PhysicsData d)
-		{
-			super(d);
-			damage = d.damage;
-			detectionDistance = d.detectionDistance;
-			isFlying = d.isFlying;
-			isImmortal = d.isImmortal;
-			isSpectral = d.isSpectral;
-			isHostile = d.isHostile;
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			ZPlayer player = ZGame.level.player;
-			if (isHostile == true && 
-					position.distance(player.physicsData.position) <= (float)detectionDistance)
-			{
-				if (aiData.isPursuing == false)
-				{
-					aiData.isPursuing = true;
-					if (isMoving == true)
-					{
-						ZAI.ComputeNearestPosition(ZMob.this);
-					}
-					else
-					{
-						ZAI.ComputeNextPosition(ZMob.this);
-					}
-				}
-
-				movementVector.set(ZConstants.DIRECTION_UNIT_VECTORS[direction]);
-				movementVector.multiply(speed * timeElapsed);
-				setPosition(movementVector.x + position.x,
-						movementVector.y + position.y);
-				if (positionPrevious.distance(position) >=
-					positionPrevious.distance(aiData.positionNext))
-				{
-					position.set(positionPrevious);
-					setPosition(aiData.positionNext);
-					ZAI.ComputeNextPosition(ZMob.this);
-				}
-			}
-			else
-			{
-				aiData.isPursuing = false;
-				if (isMoving == true)
-				{
-					movementVector.set(ZConstants.DIRECTION_UNIT_VECTORS[direction]);
-					movementVector.multiply(speed * timeElapsed);
-					setPosition(movementVector.x + position.x,
-							movementVector.y + position.y);
-					if (positionPrevious.distance(position) >=
-						positionPrevious.distance(aiData.positionNext))
-					{
-						position.set(positionPrevious);
-						setPosition(aiData.positionNext);
-						isMoving = false;
-						aiData.timeWaiting = ZAI.GetTimeWaiting();
-					}
-				}
-				else
-				{
-					aiData.timeWaiting -= timeElapsed;
-					if (aiData.timeWaiting <= 0)
-					{
-						ZAI.ComputeNextPosition(ZMob.this);
-					}
-				}		
-			}
-		}
-	}
-	
-	public class AIData extends ZAI.AIData
-	{
-		public boolean isPursuing;
-		
-		public AIData()
-		{
-			super();
-			isPursuing = false;
-		}
-		
-		public AIData(AIData d)
-		{
-			super(d);
-			isPursuing = d.isPursuing;
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			// TODO Auto-generated method stub
-			
-		}
-	}
-	
-	public int score;
-	public GraphicsData graphicsData;
-	public PhysicsData physicsData;
-	public AIData aiData;
-	
-	public ZMob()
-	{
-		super();
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-		aiData = new AIData();
-	}
-	
-	public ZMob(int id)
-	{
-		super(id);
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-		aiData = new AIData();
-	}
-	
-	public ZMob(ZMob m)
-	{
-		super(m);
-		score = m.score;
-		graphicsData = new GraphicsData(m.graphicsData);
-		physicsData = new PhysicsData(m.physicsData);
-		aiData = new AIData(m.aiData);
-	}
-
-	@Override
-	public void onDestroy() 
-	{
-		ZPhysics.wasMobDestroyed = true;
-	}
-}
Index: app/src/main/app/src/main/java/com/example/zetta/core/ZGraphics.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/core/ZGraphics.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/core/ZGraphics.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,818 +0,0 @@
-package com.example.zetta.core;
-
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import java.nio.FloatBuffer;
-import java.util.ArrayList;
-
-import javax.microedition.khronos.egl.EGLConfig;
-import javax.microedition.khronos.opengles.GL10;
-
-import com.example.zetta.ZConstants;
-import com.example.zetta.ZLog;
-import com.example.zetta.ZPrimitive.Point2f;
-import com.example.zetta.ZPrimitive.Size2f;
-import com.example.zetta.ZPrimitive.Size2i;
-import com.example.zetta.ZSettings;
-import com.example.zetta.core.ZGame.IUpdatable;
-import com.example.zetta.entity.ZEffect;
-import com.example.zetta.entity.ZItem;
-import com.example.zetta.entity.ZLevel;
-import com.example.zetta.entity.ZMachinery;
-import com.example.zetta.entity.ZMap;
-import com.example.zetta.entity.ZMob;
-import com.example.zetta.entity.ZObject;
-import com.example.zetta.entity.ZPlayer;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.opengl.GLES10;
-import android.opengl.GLSurfaceView;
-import android.opengl.GLUtils;
-import android.opengl.Matrix;
-import android.view.MotionEvent;
-import android.view.SurfaceHolder;
-
-public final class ZGraphics 
-{
-	static public abstract interface IDrawable 
-	{
-		public void draw();
-	}
-	
-	static private final class Surface extends GLSurfaceView
-	{
-		@Override
-		public void surfaceCreated(SurfaceHolder holder) 
-		{
-			ZLog.d(ZLog.TAG_GRAPHICS);
-			super.surfaceCreated(holder);
-		}
-		
-		@Override
-		public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) 
-		{
-			ZLog.d(ZLog.TAG_GRAPHICS);
-			super.surfaceChanged(holder, format, w, h);
-		}
-		
-		@Override
-		public void surfaceDestroyed(SurfaceHolder holder) 
-		{
-			ZLog.d(ZLog.TAG_GRAPHICS);
-			super.surfaceDestroyed(holder);
-		}
-		
-		public Surface(Context context) 
-		{
-			super(context);
-		}
-		
-		@Override
-		public boolean onTouchEvent(MotionEvent event) 
-		{
-			ZLog.d(ZLog.TAG_GRAPHICS);
-			ZTouchScreen.onTouchEvent(event);
-			return true;
-		}
-	}
-	
-	static private final class Renderer implements GLSurfaceView.Renderer
-	{
-		@Override
-		public void onDrawFrame(GL10 gl) 
-		{		
-			ZLog.d(ZLog.TAG_THREAD_GL);
-			
-			GLES10.glClear(GLES10.GL_COLOR_BUFFER_BIT);
-			
-			GLES10.glMatrixMode(GLES10.GL_PROJECTION);
-			GLES10.glLoadMatrixf(cameraMatrix, 0);
-		
-			GLES10.glEnableClientState(GLES10.GL_VERTEX_ARRAY);
-			GLES10.glEnableClientState(GLES10.GL_TEXTURE_COORD_ARRAY);
-			
-			map.graphicsData.draw();
-			
-			for (int i = 0, n = map.itemsCount; i < n; ++i) //TODO: проблема в копиях
-			{
-				items.get(i).graphicsData.draw();
-			}
-			for (int i = 0, n = ZGame.level.map.objectsCount; i < n; ++i)
-			{
-				objects.get(i).graphicsData.draw();
-			}
-			for (int i = 0, n = ZGame.level.map.machineriesCount; i < n; ++i)
-			{
-				machineries.get(i).graphicsData.draw();
-			}
-			for (int i = 0, n = ZGame.level.map.mobsCount; i < n; ++i)
-			{
-				mobs.get(i).graphicsData.draw();
-			}
-			
-			for (int i = 0, n = ZGame.level.map.effectsCount; i < n; ++i)
-			{
-				effects.get(i).graphicsData.draw();
-			}
-			
-			player.graphicsData.draw();
-			
-			for (int i = 0, n = postSingleAnimationsCount; i < n; ++i)
-			{
-				postSingleAnimations.get(i).draw();
-			}
-			 
-			GLES10.glDisableClientState(GLES10.GL_TEXTURE_COORD_ARRAY); 
-	        GLES10.glDisableClientState(GLES10.GL_VERTEX_ARRAY);
-	        
-	        //TODO
-	        //GLES10.glDisable(GLES10.GL_ALPHA_TEST);
-			//GLES10.glDisable(GLES10.GL_BLEND); 
-			//GLES10.glDisable(GLES10.GL_TEXTURE_2D);
-		}
-
-		public void onSurfaceChanged(GL10 gl, int width, int height) 
-		{
-			ZLog.d(ZLog.TAG_GRAPHICS);
-			
-			ZSettings.SetScreenResolution(width, height);
-			
-			GLES10.glViewport(0, 0, width, height);
-			/*GLES10.glMatrixMode(GLES10.GL_PROJECTION);
-			GLES10.glLoadIdentity();
-			GLES10.glOrthof(-1, 1, -1, 1, -1, 1);*/
-			//TODO don't need?
-			
-			GLES10.glEnable(GL10.GL_CULL_FACE);
-			GLES10.glCullFace(GL10.GL_BACK);
-		}
-
-		public void onSurfaceCreated(GL10 gl, EGLConfig config) 
-		{
-			ZLog.d(ZLog.TAG_GRAPHICS);
-			
-			GLES10.glDisable(GLES10.GL_DITHER);  
-			GLES10.glHint(GLES10.GL_PERSPECTIVE_CORRECTION_HINT, GLES10.GL_FASTEST);
-			GLES10.glClearColor(0.5f, 0.5f, 0.5f, 0);
-			GLES10.glShadeModel(GLES10.GL_SMOOTH);      
-			
-			GLES10.glEnable(GLES10.GL_TEXTURE_2D);
-			GLES10.glEnable(GLES10.GL_ALPHA_TEST);			
-			GLES10.glEnable(GLES10.GL_BLEND); 
-			GLES10.glBlendFunc(GLES10.GL_SRC_ALPHA, GLES10.GL_ONE_MINUS_SRC_ALPHA);
-			
-			GLES10.glTexParameterf(GLES10.GL_TEXTURE_2D, GLES10.GL_TEXTURE_MIN_FILTER, GLES10.GL_LINEAR);                                                     // 5a 
-			GLES10.glTexParameterf(GLES10.GL_TEXTURE_2D, GLES10.GL_TEXTURE_MAG_FILTER, GLES10.GL_LINEAR); 
-			
-			for (int i = 0, n = ZFileSystem.spriteResources.length; i < n; ++i)
-			{
-				if (ZFileSystem.spriteResources[i].isUsed == true)
-				{
-					ZFileSystem.spriteResources[i].DecodeBitmap();
-					int x = ZFileSystem.spriteResources[i].bitmap.getWidth();
-					ZFileSystem.spriteResources[i].BindTexture();
-				}
-			}
-		}
-	}
-	
-	static public abstract class Sprite implements IDrawable, IUpdatable
-	{
-		public FloatBuffer modelMeshBuffer, textureMeshBuffer;
-		public float[] modelMesh, textureMesh, modelMatrix, textureMatrix;
-		public Point2f texturePosition, modelPosition;
-		public Size2f modelSizeHalf, textureSize;
-		public SpriteResource resource;
-		
-		protected ByteBuffer byteBuffer;
-		
-		public Sprite()
-		{
-			textureMatrix = new float[ZConstants.GRAPHICS_MATRIX_SIZE];
-			modelMatrix = new float[ZConstants.GRAPHICS_MATRIX_SIZE];
-			texturePosition = new Point2f();
-			textureSize = new Size2f();
-			modelPosition = new Point2f();
-			modelSizeHalf = new Size2f();
-			resource = null;
-		}
-		
-		public Sprite(Sprite p)
-		{
-			textureMatrix = new float[ZConstants.GRAPHICS_MATRIX_SIZE];
-			System.arraycopy(p.textureMatrix, 0, textureMatrix, 0, p.textureMatrix.length);
-			modelMatrix = new float[ZConstants.GRAPHICS_MATRIX_SIZE];
-			System.arraycopy(p.modelMatrix, 0, modelMatrix, 0, p.modelMatrix.length);
-			resource = p.resource;
-			
-			texturePosition = new Point2f(p.texturePosition);
-			textureSize = new Size2f(p.textureSize);
-			modelPosition = new Point2f(p.modelPosition);
-			modelSizeHalf = new Size2f(p.modelSizeHalf);
-			
-			modelMesh = new float[p.modelMesh.length];
-			System.arraycopy(p.modelMesh, 0, modelMesh, 0, p.modelMesh.length);
-			byteBuffer = ByteBuffer.allocateDirect(modelMesh.length * 4);   
-	        byteBuffer.order(ByteOrder.nativeOrder()); 
-	        modelMeshBuffer = byteBuffer.asFloatBuffer(); 
-	        modelMeshBuffer.put(modelMesh); 
-	        modelMeshBuffer.position(0); 
-			
-	        textureMesh = new float[p.textureMesh.length];
-			System.arraycopy(p.textureMesh, 0, textureMesh, 0, p.textureMesh.length);
-			byteBuffer = ByteBuffer.allocateDirect(textureMesh.length * 4);   
-	        byteBuffer.order(ByteOrder.nativeOrder()); 
-	        textureMeshBuffer = byteBuffer.asFloatBuffer(); 
-	        textureMeshBuffer.put(this.textureMesh); 
-	        textureMeshBuffer.position(0);
-		}
-		
-		public final void setMeshes(float[] _modelMesh, float[] _textureMesh)
-		{			
-			modelMesh = new float[_modelMesh.length];
-			System.arraycopy(_modelMesh, 0, modelMesh, 0, _modelMesh.length);
-			byteBuffer = ByteBuffer.allocateDirect(modelMesh.length * 4);   
-	        byteBuffer.order(ByteOrder.nativeOrder()); 
-	        modelMeshBuffer = byteBuffer.asFloatBuffer(); 
-	        modelMeshBuffer.put(modelMesh); 
-	        modelMeshBuffer.position(0); 
-			
-	        textureMesh = new float[_textureMesh.length];
-			System.arraycopy(_textureMesh, 0, textureMesh, 0, _textureMesh.length);
-			byteBuffer = ByteBuffer.allocateDirect(textureMesh.length * 4);   
-	        byteBuffer.order(ByteOrder.nativeOrder()); 
-	        textureMeshBuffer = byteBuffer.asFloatBuffer(); 
-	        textureMeshBuffer.put(this.textureMesh); 
-	        textureMeshBuffer.position(0);
-		}	
-		
-		//TODO �� ������ ���� ������ ���������������!!!
-		public final void setModelPosition(Point2f modelPositionOnMap)
-		{
-			modelPosition.set(
-					modelPositionOnMap.x * ZSettings.MAP_CELL_SIZE_RELATIVE.width - 
-						map.graphicsData.tile.modelSizeHalf.width,
-					modelPositionOnMap.y * ZSettings.MAP_CELL_SIZE_RELATIVE.height - 
-						map.graphicsData.tile.modelSizeHalf.height);
-		}
-		
-		public final void setModelPosition(float x, float y)
-		{
-			modelPosition.set(
-					x * ZSettings.MAP_CELL_SIZE_RELATIVE.width - 
-						map.graphicsData.tile.modelSizeHalf.width,
-					y * ZSettings.MAP_CELL_SIZE_RELATIVE.height - 
-						map.graphicsData.tile.modelSizeHalf.height);
-		}
-		
-		//TODO �� ������ ���� ����� �������!!!
-		public final void setModelPositionMap()
-		{
-			modelPosition.set(-ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2,
-					-ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2);		
-		}
-		
-		//TODO wtf?
-		/*public final void setModelSizeHalf(Size2f modelSize)
-		{
-			modelSizeHalf.set(modelSize.width / 2, modelSize.height / 2);
-		}*/
-		
-		//TODO wtf?
-		public final void setModelSizeHalf(Size2i modelSize)
-		{
-			modelSizeHalf.set((float)modelSize.width * ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2,
-					(float)modelSize.height * ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2);
-		}
-		
-		//TODO wtf?
-		public final void setModelSizeHalf(int x, int y)
-		{
-			modelSizeHalf.set((float)x * ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2, 
-					(float)y * ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2);
-		}
-		
-		public final void setModelSizeHalfMapCell()
-		{
-			modelSizeHalf.set(ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2,
-					ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2);
-		}
-		
-		public final void setModelSizeHalfGuiCell()
-		{
-			modelSizeHalf.set(ZSettings.GUI_CELL_SIZE_RELATIVE.width / 2,
-					ZSettings.GUI_CELL_SIZE_RELATIVE.height / 2);
-		}
-		
-		public void computeMatrixes()
-		{
-			Matrix.setIdentityM(textureMatrix, 0);
-			Matrix.translateM(textureMatrix, 0, texturePosition.x, texturePosition.y, 0);
-			Matrix.scaleM(textureMatrix, 0, textureSize.width, textureSize.height, 0);
-			
-			Matrix.setIdentityM(modelMatrix, 0);
-			Matrix.translateM(modelMatrix, 0, modelPosition.x, modelPosition.y, 0);			
-			Matrix.scaleM(modelMatrix, 0, modelSizeHalf.width, modelSizeHalf.height, 0);
-		}
-		
-		//TODO: is it need?
-		/*public void computeTextureMatrix()
-		{
-			Matrix.setIdentityM(textureMatrix, 0);
-			Matrix.translateM(textureMatrix, 0, texturePosition.x, texturePosition.y, 0);
-			Matrix.scaleM(textureMatrix, 0, textureSize.width, textureSize.height, 0);
-		}
-		
-		public void computeModelMatrix()
-		{
-			Matrix.setIdentityM(modelMatrix, 0);
-			Matrix.translateM(modelMatrix, 0, modelPosition.x, modelPosition.y, 0);			
-			Matrix.scaleM(modelMatrix, 0, modelSizeHalf.width, modelSizeHalf.height, 0);
-		}*/
-		
-		@Override
-		public void draw() 
-		{
-			GLES10.glTexParameterf(GLES10.GL_TEXTURE_2D, GLES10.GL_TEXTURE_MIN_FILTER, GLES10.GL_LINEAR);                                                     // 5a 
-			GLES10.glTexParameterf(GLES10.GL_TEXTURE_2D, GLES10.GL_TEXTURE_MAG_FILTER, GLES10.GL_LINEAR);
-			GLES10.glTexParameterf(GLES10.GL_TEXTURE_2D, GLES10.GL_TEXTURE_WRAP_S, GLES10.GL_REPEAT); 
-			GLES10.glTexParameterf(GLES10.GL_TEXTURE_2D, GLES10.GL_TEXTURE_WRAP_T, GLES10.GL_REPEAT);
-			
-			GLES10.glBindTexture(GLES10.GL_TEXTURE_2D, resource.textureId[0]);  
-			GLES10.glTexCoordPointer(2, GLES10.GL_FLOAT, 0, textureMeshBuffer);
-			
-			GLES10.glMatrixMode(GLES10.GL_TEXTURE);
-			GLES10.glLoadMatrixf(textureMatrix, 0);
-			
-			GLES10.glMatrixMode(GLES10.GL_MODELVIEW);
-			GLES10.glLoadMatrixf(modelMatrix, 0);
-			
-			GLES10.glVertexPointer(2, GLES10.GL_FLOAT, 0, modelMeshBuffer); 
-			GLES10.glDrawArrays(GLES10.GL_TRIANGLE_STRIP, 0, 4);
-		}
-	}
-	
-	static public final class Image extends Sprite
-	{		
-		public Image()
-		{
-			super();
-		}
-		
-		public Image(Image s)
-		{
-			super(s);
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			computeMatrixes();
-		}
-	}
-	
-	static public abstract class Animation extends Sprite
-	{	
-		public long time = 0;
-		public int step = 0;
-		public boolean isPlaying = false;
-		
-		public Animation()
-		{
-			super();
-		}
-		
-		public Animation(Animation a)
-		{
-			super(a);
-			time = a.time;
-			step = a.step;
-			isPlaying = a.isPlaying;
-		}
-		
-		public void setPlaying(boolean _isPlaying)
-		{
-			if (isPlaying != _isPlaying)
-			{
-				isPlaying = _isPlaying;
-				step = 0;
-			}
-		}
-	}
-	
-	static public final class SingleAnimation extends Animation
-	{
-		public int stepsCount;
-		public long timeStepSwitching;
-		boolean isFinished = false;
-		
-		public SingleAnimation()
-		{
-			super();
-		}
-		
-		public SingleAnimation(SingleAnimation a)
-		{
-			super(a);
-			stepsCount = a.stepsCount;
-			timeStepSwitching = a.timeStepSwitching;
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			if (isPlaying == true)
-			{
-				time += timeElapsed;
-				int stepsElapsed = (int)(time / timeStepSwitching);
-				if (step + stepsElapsed < stepsCount)
-				{
-					step += stepsElapsed;
-					time %= timeStepSwitching;
-					texturePosition.add(textureSize.width * (float)stepsElapsed, 0f);
-				}
-				else
-				{
-					isFinished = true;
-				}
-			}
-			computeMatrixes();
-		}
-	}
-	
-	static public final class ReversibleAnimation extends Animation
-	{	
-		public int stepsCount;
-		public boolean isReversible = true;
-		public long[] timesStepSwitching;
-		
-		public ReversibleAnimation()
-		{
-			super();
-		}
-		
-		public ReversibleAnimation(ReversibleAnimation a)
-		{
-			super(a);
-			stepsCount = a.stepsCount;
-			isReversible = a.isReversible;
-			timesStepSwitching = new long[a.timesStepSwitching.length];
-			System.arraycopy(a.timesStepSwitching, 0, timesStepSwitching, 0, a.timesStepSwitching.length);
-		}
-		
-		@Override
-		public void update(long timeElapsed) 
-		{
-			if (isPlaying == true)
-			{
-				time += timeElapsed;
-				if (time > timesStepSwitching[step])
-				{
-					time %= timesStepSwitching[step];
-					if (step == stepsCount - 1)
-					{
-						isReversible = true;
-					}
-					else
-						if (step == 0)
-						{
-							isReversible = false;
-						}
-	
-					if (isReversible == true)
-					{
-						--step;
-						texturePosition.reduce(textureSize.width, 0f);
-					}
-					else
-					{
-						++step;
-						texturePosition.add(textureSize.width, 0f);
-					}
-				}
-			}
-			computeMatrixes();
-		}
-	}
-	
-	static public final class IteratableAnimation extends Animation
-	{
-		
-		
-		public int state, statesCount;
-		public long stepSwitchTime;
-		public Point2f[] texturePositionsInitial;
-		public int[] stepsCount;
-		
-		public IteratableAnimation()
-		{
-			super();
-		}
-		
-		public IteratableAnimation(IteratableAnimation a)
-		{
-			super(a);
-			int i, n;
-			state = a.state;
-			statesCount = a.statesCount;
-			stepSwitchTime = a.stepSwitchTime;
-			
-			n = a.stepsCount.length;
-			stepsCount = new int[n];
-			System.arraycopy(a.stepsCount, 0, stepsCount, 0, n);
-			
-			
-			texturePositionsInitial = new Point2f[n];
-			for (i = 0, n = a.texturePositionsInitial.length; i < n; ++i)
-			{
-				texturePositionsInitial[i] = new Point2f(a.texturePositionsInitial[i]);
-			}
-		}
-				
-		public void setState(int _state)
-		{
-			if (state != _state)
-			{
-				state = _state;
-				step = 0;
-				texturePosition.set(texturePositionsInitial[_state]);
-			}
-		}
-		
-		public void zeroStep()
-		{
-			step = 0;
-			texturePosition.set(texturePositionsInitial[state]);
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			if (isPlaying == true)
-			{
-				time += timeElapsed;
-				if (time > stepSwitchTime)
-				{
-					step += time / stepSwitchTime;
-					time %= stepSwitchTime;
-					step %= stepsCount[state];
-					texturePosition.set(texturePositionsInitial[state]);
-					texturePosition.add(textureSize.width * step, 0f);
-				}
-			}
-			computeMatrixes();
-		}
-	}
-	
-	static public abstract class GraphicsData implements IDrawable, IUpdatable
-	{
-		public GraphicsData()
-		{
-			
-		}
-		
-		public GraphicsData(GraphicsData d)
-		{
-			
-		}
-	}
-	
-	static public final class SpriteResource
-	{
-		public int resourceId;
-		public int[] textureId = new int[1];
-		public Bitmap bitmap;
-		public boolean isUsed = false;
-		
-		public SpriteResource()
-		{
-			resourceId = ZConstants.RESOURCE_ID_INVALID;
-			textureId[0] = ZConstants.RESOURCE_ID_INVALID;
-			bitmap = null;
-		}
-		
-		public SpriteResource(int _resourceId)
-		{
-			resourceId = _resourceId;
-			textureId[0] = ZConstants.RESOURCE_ID_INVALID;
-			bitmap = null;
-		}
-		
-		public void DecodeBitmap()
-		{
-			BitmapFactory.Options options = new BitmapFactory.Options();
-			options.inScaled = false;
-			bitmap = BitmapFactory.decodeResource(ZGame.resources, resourceId, options);
-		}
-		
-		public void BindTexture()
-		{
-			GLES10.glGenTextures(1, textureId, 0);     
-			GLES10.glBindTexture(GLES10.GL_TEXTURE_2D, textureId[0]); 
-			GLES10.glTexParameterf(GLES10.GL_TEXTURE_2D, GLES10.GL_TEXTURE_MIN_FILTER, GLES10.GL_LINEAR);                                                     // 5a 
-			GLES10.glTexParameterf(GLES10.GL_TEXTURE_2D, GLES10.GL_TEXTURE_MAG_FILTER, GLES10.GL_LINEAR); 
-			GLUtils.texImage2D(GLES10.GL_TEXTURE_2D, 0, bitmap, 0);
-			bitmap.recycle();
-		}
-		
-		public void DeleteTexture()
-		{
-			GLES10.glDeleteTextures(1, textureId, 0);
-			textureId[0] = ZConstants.IDENTITY_ID_INVALID;
-			isUsed = false;
-		}
-		
-		static public Bitmap DecodeBitmap(int id)
-		{
-			return BitmapFactory.decodeResource(ZGame.resources, id);
-		}
-	}
-	
-	static public Surface surface;
-	static public Renderer renderer;
-	
-	static private ArrayList<SingleAnimation> postSingleAnimations;
-	static private int postSingleAnimationsCount;
-	static private float[] cameraMatrix = new float[ZConstants.GRAPHICS_MATRIX_SIZE];
-	
-	static private ZPlayer player;
-	static private ZMap map;
-	static private ArrayList<ZMob> mobs;
-	static private ArrayList<ZEffect> effects;
-	static private ArrayList<ZItem> items;
-	static private ArrayList<ZMachinery> machineries;
-	static private ArrayList<ZObject> objects;
-	
-	static 
-	{
-		postSingleAnimations = new ArrayList<SingleAnimation>();
-	}
-	
- 	static public void Adjust()
-	{
-		ZLog.d(ZLog.TAG_GRAPHICS);
-		renderer = new Renderer();
-		surface = new Surface(ZGame.context);
-        surface.setRenderer(renderer); 
-        surface.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);
-        ZGame.activity.setContentView(surface);
-	}
- 	
- 	static public void SetScene(ZLevel level)
- 	{
- 		player = level.player;
- 		map = level.map;
- 		
- 		effects = level.map.effects;
- 		mobs = level.map.mobs;
- 		items = level.map.items;
- 		objects = level.map.objects;
- 		machineries = level.map.machineries;
- 	}
-
-	static public void OnResume()
-	{
-		ZLog.d(ZLog.TAG_GRAPHICS);
-		//TODO don't use it
-		surface.onResume();
-	}
-	
-	static public void OnPause()
-	{
-		ZLog.d(ZLog.TAG_GRAPHICS);
-		//TODO don't use it
-		surface.onPause();
-	}
-
-	static private void ComputeCameraMatrix()
-	{
-		//TODO rewrite		
-		Point2f translateDelta = new Point2f(), playerPoint = ZGame.level.player.physicsData.position;
-		Size2f mapSizeHalf = ZGame.level.map.graphicsData.tile.modelSizeHalf;
-		Matrix.setIdentityM(cameraMatrix, 0);
-		//Matrix.orthoM(cameraMatrix, 0, -1, 1, -1, 1, -1, 1);
-		
-		if (mapSizeHalf.width <= 1f)
-		{
-			translateDelta.x = ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2;
-		}
-		else
-			if (playerPoint.x * ZSettings.MAP_CELL_SIZE_RELATIVE.width + 
-					ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2 < 1f)
-			{
-				translateDelta.x = mapSizeHalf.width - 1f + ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2;
-			}
-			else
-				if ((mapSizeHalf.width + mapSizeHalf.width) - playerPoint.x * ZSettings.MAP_CELL_SIZE_RELATIVE.width - 
-						ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2 < 1f)
-				{
-					translateDelta.x = 1f - mapSizeHalf.width + ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2;
-				}
-				else
-				{
-					translateDelta.x = mapSizeHalf.width - playerPoint.x * ZSettings.MAP_CELL_SIZE_RELATIVE.width;
-				}
-		
-		if (mapSizeHalf.height <= 1f)
-		{
-			translateDelta.y = ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2;
-		}
-		else
-			if (playerPoint.y * ZSettings.MAP_CELL_SIZE_RELATIVE.height +
-					ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2  < 1f)
-			{
-				translateDelta.y = mapSizeHalf.height - 1f + ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2;
-			}
-			else
-				if ((mapSizeHalf.height + mapSizeHalf.height) - playerPoint.y * ZSettings.MAP_CELL_SIZE_RELATIVE.height -
-						ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2 < 1f)
-				{
-					translateDelta.y = 1f - mapSizeHalf.height + ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2;
-				}
-				else
-				{
-					translateDelta.y = mapSizeHalf.height - playerPoint.y * ZSettings.MAP_CELL_SIZE_RELATIVE.height;
-				}
-		
-		
-		//Matrix.translateM(cameraMatrix, 0, translateDelta.x, translateDelta.y, 0);
-		Matrix.orthoM(cameraMatrix, 0, -1 - translateDelta.x, 1 - translateDelta.x, 
-				-1 - translateDelta.y, 1 - translateDelta.y, -1, 1);
-	}
-	
-	static public void AddPostSingleAnimation(SingleAnimation a)
-	{
-		if (postSingleAnimations.size() > postSingleAnimationsCount)
-		{
-			postSingleAnimations.set(postSingleAnimationsCount, a);
-			++postSingleAnimationsCount;
-		}
-		else
-		{
-			postSingleAnimations.add(a);
-			postSingleAnimationsCount = postSingleAnimations.size();
-		}
-	}
-	
-	static public void DeletePostSingleAnimation(int index)
-	{
-		--postSingleAnimationsCount;
-		postSingleAnimations.set(index, postSingleAnimations.get(postSingleAnimationsCount));
-		postSingleAnimations.set(postSingleAnimationsCount, null);
-	}
-	
-	static public void Update(long timeElapsed)
-	{
-		int i, n;
-		
-		map.graphicsData.update(timeElapsed);
-		player.graphicsData.update(timeElapsed);
-		
-		for (i = 0, n = map.effectsCount; i < n; ++i)
-		{
-			effects.get(i).graphicsData.update(timeElapsed);
-		}
-		
-		for (i = 0, n = map.itemsCount; i < n; ++i)
-		{
-			items.get(i).graphicsData.update(timeElapsed);
-		}
-		
-		for (i = 0, n = map.machineriesCount; i < n; ++i)
-		{
-			machineries.get(i).graphicsData.update(timeElapsed);
-		}
-		
-		for (i = 0, n = map.mobsCount; i < n; ++i)
-		{
-			mobs.get(i).graphicsData.update(timeElapsed);
-		}
-		
-		for (i = 0, n = map.objectsCount; i < n; ++i)
-		{
-			objects.get(i).graphicsData.update(timeElapsed);
-		}
-		
-		i = 0;
-		while (i < postSingleAnimationsCount)
-		{
-			postSingleAnimations.get(i).update(timeElapsed);
-			if (postSingleAnimations.get(i).isFinished == false)
-			{
-				++i;
-			}
-			else
-			{
-				DeletePostSingleAnimation(i);
-			}
-		}
-	}
-	
-	static public void RequestRender()
-	{		
-		ComputeCameraMatrix();
-		surface.requestRender();
-	}
-}
Index: app/src/main/app/src/main/res/raw/items.txt
===================================================================
--- app/src/main/app/src/main/res/raw/items.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/raw/items.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,27 +0,0 @@
-//id - 1 - coin
-5
-1
-1
-1
-0
-0
-6
-0
-//id - 2 - bomb
-3
-2
-1
-1
-0
-0
-7
-1
-0
-0
-1
-27
-0
-0
-27
-525
-10
Index: app/src/main/app/src/main/java/com/example/zetta/core/ZTouchScreen.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/core/ZTouchScreen.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/core/ZTouchScreen.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,221 +0,0 @@
-package com.example.zetta.core;
-
-import java.util.concurrent.Semaphore;
-
-import com.example.zetta.ZLog;
-import com.example.zetta.ZPrimitive.Point2f;
-import com.example.zetta.ZConstants;
-import com.example.zetta.ZSettings;
-
-import android.view.MotionEvent;
-
-public final class ZTouchScreen 
-{	
-	static private boolean isPressing = false;
-	static private int direction = ZConstants.DIRECTION_INVALID, pointerCurrentIndex;
-	static private Point2f pointerCoordinates;
-	static private Semaphore directionLock, isPressingLock;
-	
-	static
-	{
-		pointerCoordinates = new Point2f();
-		directionLock = new Semaphore(1, true);
-		isPressingLock = new Semaphore(1, true);
-	}
-
-	static public void onTouchEvent(MotionEvent event) 
-	{
-		int direction = ZConstants.DIRECTION_INVALID, auxiliary;
-		if (event.getPointerCount() > ZConstants.TOUCHSCREEN_POINTERS_COUNT_MAX)
-		{
-			ZLog.d(ZLog.SECURITY_LEVEL_ERROR, ZLog.TAG_TOUCHSCREEN, "pointers - max count of pointers was exceeded");
-			return;
-		}
-		
-		int action = event.getAction(), width = ZSettings.SCREEN_RESOLUTION_ABSOLUTE.width,
-			height = ZSettings.SCREEN_RESOLUTION_ABSOLUTE.height,
-			pointerIndexCurrent = (action & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
-		action &= MotionEvent.ACTION_MASK;
-		
-		switch(action)
-		{
-		case MotionEvent.ACTION_MOVE:
-			pointerCoordinates.x = event.getX(pointerCurrentIndex); 
-			pointerCoordinates.y = event.getY(pointerCurrentIndex); 
-			ZLog.d(ZLog.TAG_TOUCHSCREEN, "action - move");
-			break;
-		
-		case MotionEvent.ACTION_POINTER_DOWN:
-			pointerCurrentIndex = pointerIndexCurrent;
-			pointerCoordinates.x = event.getX(pointerCurrentIndex); 
-			pointerCoordinates.y = event.getY(pointerCurrentIndex); 
-			ZLog.d(ZLog.TAG_TOUCHSCREEN, "action - pointer down");
-			break;
-			
-		case MotionEvent.ACTION_POINTER_UP:
-			if (pointerCurrentIndex == pointerIndexCurrent)
-			{
-				pointerCurrentIndex = (pointerCurrentIndex == 1) ? 0 : 1;
-			}
-			else
-			{
-				pointerCurrentIndex = (pointerCurrentIndex == 0) ? 0 : 1;
-			}
-			pointerCoordinates.x = event.getX(pointerCurrentIndex); 
-			pointerCoordinates.y = event.getY(pointerCurrentIndex); 
-			pointerCurrentIndex = 0;
-			ZLog.d(ZLog.TAG_TOUCHSCREEN, "action - pointer up");
-			break;
-			
-		case MotionEvent.ACTION_DOWN: 	
-			try 
-			{
-				isPressingLock.acquire();
-				isPressing = true;	
-				isPressingLock.release();
-			} 
-			catch (InterruptedException e) 
-			{
-				e.printStackTrace();
-			}
-			pointerCurrentIndex = pointerIndexCurrent;
-			pointerCoordinates.x = event.getX(pointerCurrentIndex); 
-			pointerCoordinates.y = event.getY(pointerCurrentIndex); 
-			ZLog.d(ZLog.TAG_TOUCHSCREEN, "action - down");
-			break;
-			
-		case MotionEvent.ACTION_UP: 
-			try 
-			{
-				isPressingLock.acquire();
-				isPressing = false;	
-				isPressingLock.release();
-			} 
-			catch (InterruptedException e) 
-			{
-				e.printStackTrace();
-			}
-			pointerCurrentIndex = pointerIndexCurrent;
-			pointerCoordinates.x = event.getX(pointerCurrentIndex); 
-			pointerCoordinates.y = event.getY(pointerCurrentIndex); 
-			ZLog.d(ZLog.TAG_TOUCHSCREEN, "action - up");
-			break;
-		}
-		
-		switch(ZSettings.TOUCHSCREEN_CONTROL)
-		{
-		case ZConstants.TOUCHSCREEN_CONTROL_C4:
-			width >>= 1;
-	    	height >>= 1;
-	    	width -= (int)pointerCoordinates.x;
-	    	height -= (int)pointerCoordinates.y;
-	    	if (Math.abs(width) > Math.abs(height))
-	    	{
-	    		direction = (width < 0) ? (byte)ZConstants.DIRECTION_RIGHT : (byte)ZConstants.DIRECTION_LEFT;
-	    	}
-	    	else
-	    	{
-	    		direction = (height < 0) ? (byte)ZConstants.DIRECTION_DOWN : (byte)ZConstants.DIRECTION_UP;
-	    	}
-	    	break;
-	    	
-		case ZConstants.TOUCHSCREEN_CONTROL_E6:
-			auxiliary = height / 3;
-			if ((int)pointerCoordinates.y < auxiliary)
-			{
-				direction = ZConstants.DIRECTION_UP;
-			}
-			else
-				if ((int)pointerCoordinates.y > height - auxiliary)
-				{
-					direction = ZConstants.DIRECTION_DOWN;
-				}
-				else
-				{
-					auxiliary = (width >> 1) - (int)pointerCoordinates.x;
-					if (auxiliary < 0)
-					{
-						direction = ZConstants.DIRECTION_RIGHT;
-					}
-					else
-					{
-						direction = ZConstants.DIRECTION_LEFT;
-					}
-				}
-			break;
-		}
-		
-		try 
-		{
-			directionLock.acquire();
-	    	ZTouchScreen.direction = direction;
-	    	directionLock.release();
-	    	
-			String directionString;
-			boolean directionCorrect = true;
-			switch(direction)
-			{
-			case ZConstants.DIRECTION_LEFT: directionString = "left"; break;
-			case ZConstants.DIRECTION_UP: directionString = "up"; break;
-			case ZConstants.DIRECTION_RIGHT: directionString = "right"; break;
-			case ZConstants.DIRECTION_DOWN: directionString = "down"; break;
-			default: directionString = "nothere!"; directionCorrect = false; break;
-			}
-			if (directionCorrect == true)
-			{
-				ZLog.d(ZLog.TAG_TOUCHSCREEN, 
-						"pointer - coordinates(" + pointerCoordinates.x + ", " + pointerCoordinates.y + ")");
-				ZLog.d(ZLog.TAG_TOUCHSCREEN, 
-						"direction - " + direction + "(" + directionString + ")");
-			}
-			else
-			{
-				ZLog.d(ZLog.SECURITY_LEVEL_ERROR, ZLog.TAG_TOUCHSCREEN, 
-						"pointer - coordinates(" + pointerCoordinates.x + ", " + pointerCoordinates.y + ")");
-				ZLog.d(ZLog.SECURITY_LEVEL_ERROR, ZLog.TAG_TOUCHSCREEN, 
-						"direction - " + direction + "(" + directionString + ")");
-			}
-		} 
-		catch (InterruptedException e) 
-		{
-			e.printStackTrace();
-		}
-	}
-	
-	static public boolean GetIsPressing()
-	{
-		boolean isPressingResult = false;
-		try 
-		{
-			isPressingLock.acquire();
-			isPressingResult = isPressing;	
-			isPressingLock.release();
-		} 
-		catch (InterruptedException e) 
-		{
-			e.printStackTrace();
-		}
-		return isPressingResult;
-	}
-	
-	static public int GetDirection()
-	{
-		int directionResult = ZConstants.DIRECTION_INVALID;
-		try 
-		{
-			directionLock.acquire();
-			directionResult = direction;
-			directionLock.release();
-		} 
-		catch (InterruptedException e) 
-		{
-			e.printStackTrace();
-		}
-		return directionResult;
-	}
-	
-	static public void SetDirectionAsync(int _direction)
-	{
-		direction = _direction;
-	}
-}
Index: app/src/main/app/src/main/res/raw/players.txt
===================================================================
--- app/src/main/app/src/main/res/raw/players.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/raw/players.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,32 +0,0 @@
-// id - 1
-1
-0
-0
-0.003
-0.75
-0.75
-1
-1
-3
-3
-4
-3
-0
-0
-4
-0
-3
-3
-3
-3
-65
-0
-0.25
-0
-0.25
-0
-0.75
-0
-0.5
-0
-0
Index: app/src/main/app/src/main/java/com/example/zetta/entity/ZItem.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/entity/ZItem.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/entity/ZItem.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,134 +0,0 @@
-package com.example.zetta.entity;
-
-import com.example.zetta.core.ZGame;
-import com.example.zetta.core.ZGraphics;
-import com.example.zetta.core.ZGraphics.SingleAnimation;
-import com.example.zetta.core.ZPhysics;
-import com.example.zetta.core.ZSequencer;
-import com.example.zetta.core.ZGame.Identity;
-import com.example.zetta.core.ZGraphics.Image;
-import com.example.zetta.core.ZSequencer.Sound;
-
-public final class ZItem extends Identity
-{
-	public final class GraphicsData extends ZGraphics.GraphicsData
-	{
-		public Image image;
-		public SingleAnimation postAnimation;
-		
-		public GraphicsData()
-		{
-			super();	
-			image = new Image();
-		}
-		
-		public GraphicsData(GraphicsData d)
-		{
-			super(d);
-			image = new Image(d.image);
-			postAnimation = (d.postAnimation == null) ? null : new SingleAnimation(d.postAnimation);
-		}
-
-		@Override
-		public void draw() 
-		{
-			image.draw();
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			image.setModelPosition(physicsData.position);
-			image.setModelSizeHalfMapCell();
-			image.update(timeElapsed);
-		}
-	}
-
-	public final class PhysicsData extends ZPhysics.PhysicsData
-	{
-		public PhysicsData()
-		{
-			super();
-		}
-		
-		public PhysicsData(PhysicsData d)
-		{
-			super(d);
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			
-		}
-	}
-	
-	public final class SequencerData extends ZSequencer.SequencerData
-	{
-		public Sound postSound;
-		
-		public SequencerData()
-		{
-			super();
-			postSound = new Sound();
-		}
-		
-		public SequencerData(SequencerData d)
-		{
-			super(d);
-			this.postSound = new Sound(d.postSound);
-		}
-	}
-	
-	public int score;
-	public ZBuff buff;
-	public GraphicsData graphicsData;
-	public PhysicsData physicsData;
-	public SequencerData sequencerData;
-	
-	public ZItem()
-	{
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-		sequencerData = new SequencerData();
-	}
-	
-	public ZItem(int id)
-	{
-		super(id);
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-		sequencerData = new SequencerData();
-	}
-	
-	public ZItem(ZItem i)
-	{
-		super(i);
-		score = i.score;
-		buff = (i.buff == null) ? null : new ZBuff(i.buff);
-		graphicsData = new GraphicsData(i.graphicsData);
-		physicsData = new PhysicsData(i.physicsData);
-		sequencerData = new SequencerData(i.sequencerData);
-	}
-
-	@Override
-	public void onDestroy() 
-	{
-		ZPhysics.wasItemDestroyed = true;
-		ZGame.level.map.cells[(int)physicsData.position.y][(int)physicsData.position.x].item = null;
-		
-		if (graphicsData.postAnimation != null)
-		{
-			graphicsData.postAnimation.setPlaying(true);
-			graphicsData.postAnimation.setModelPosition(physicsData.position);
-			graphicsData.postAnimation.setModelSizeHalf(3, 3);
-			ZGraphics.AddPostSingleAnimation(graphicsData.postAnimation);
-		}
-		
-		if (sequencerData.postSound != null)
-		{
-			ZSequencer.AddPostSound(sequencerData.postSound);
-			sequencerData.postSound.start();
-		}
-	}
-}
Index: app/src/main/app/src/main/java/com/example/zetta/activity/ZGameActivity.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/activity/ZGameActivity.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/activity/ZGameActivity.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,138 +0,0 @@
-package com.example.zetta.activity;
-
-import com.example.zetta.R;
-import com.example.zetta.ZLog;
-import com.example.zetta.ZSettings;
-import com.example.zetta.core.ZGame;
-
-import android.os.Bundle;
-import android.app.Activity;
-import android.content.res.Configuration;
-import android.graphics.Point;
-import android.graphics.Rect;
-import android.util.DisplayMetrics;
-import android.view.Display;
-import android.view.Menu;
-import android.view.MotionEvent;
-import android.view.WindowManager;
-
-public class ZGameActivity extends Activity 
-{
-	@Override
-	protected void onCreate(Bundle savedInstanceState) 
-	{
-		super.onCreate(savedInstanceState);
-		
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		if (ZSettings.SCREEN_FULLSCREEN == false)
-		{
-			getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
-					WindowManager.LayoutParams.FLAG_FULLSCREEN);
-		}		
-		game = new ZGame(this);
-		game.onCreate();
-	}
-
-	@Override
-	protected void onDestroy() 
-	{
-		super.onDestroy();
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		game.onDestroy();
-		game = null;
-	}
-
-	@Override
-	protected void onPause() 
-	{
-		super.onPause();
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		game.onPause();
-	}
-
-	@Override
-	protected void onRestart() 
-	{
-		super.onRestart();
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		game.onRestart();
-	}
-
-	@Override
-	protected void onResume() 
-	{
-		super.onResume();
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		game.onResume();
-	}
-
-	@Override
-	protected void onStart() 
-	{
-		super.onStart();
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		game.onStart();
-	}
-
-	@Override
-	protected void onStop() 
-	{
-		super.onStop();
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		game.onStop();
-	}
-	
-	ZGame game;
-	
-	@Override
-	public boolean onTouchEvent(MotionEvent event) 
-	{
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		return super.onTouchEvent(event);
-	}
-	
-	@Override
-	public boolean onCreateOptionsMenu(Menu menu) 
-	{
-		super.onCreateOptionsMenu(menu);
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		getMenuInflater().inflate(R.menu.game, menu);
-		return true;
-	}
-	
-	@Override
-    public void onConfigurationChanged(Configuration newConfig) 
-	{
-		super.onConfigurationChanged(newConfig);
-		ZLog.d(ZLog.TAG_ACTIVITY);
-    }
-
-	//TODO: delete all of these (bottom)
-	@Override
-	public void finish() 
-	{
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		super.finish();
-	}
-
-	@Override
-	public void finishActivity(int requestCode) 
-	{
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		super.finishActivity(requestCode);
-	}
-
-	@Override
-	public void finishActivityFromChild(Activity child, int requestCode) 
-	{
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		super.finishActivityFromChild(child, requestCode);
-	}
-
-	@Override
-	public void finishFromChild(Activity child) 
-	{
-		ZLog.d(ZLog.TAG_ACTIVITY);
-		super.finishFromChild(child);
-	}
-}
\ No newline at end of file
Index: app/src/main/app/src/main/java/com/example/zetta/ZConstants.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/ZConstants.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/ZConstants.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,64 +0,0 @@
-package com.example.zetta;
-
-import com.example.zetta.ZPrimitive.Vector2f;
-
-public final class ZConstants 
-{
-	//TODO DELETE
-	static final public int mv = 42, sv = 23;
-	//static final public int mv = 0, sv = 0;
-	//TODO DELETE
-	
-	static final public Vector2f[]	DIRECTION_UNIT_VECTORS = new Vector2f[]
-	                                    {
-											new Vector2f(-1f, 0f),
-											new Vector2f(0f, 1f),
-											new Vector2f(1f, 0f),
-											new Vector2f(0f, -1f)
-	                                    };
-	
-	static final public int			DIRECTION_INVALID = -1,
-									DIRECTION_LEFT = 0, 
-									DIRECTION_UP = 1, 
-									DIRECTION_RIGHT = 2, 
-									DIRECTION_DOWN = 3,
-								
-									MAP_NO_BUFFS = 0, 
-									MAP_BUFF_SLOW = 1, 
-									MAP_BUFF_MOVING_INERTIAL = 2,
-									
-									CREATURE_CELLS_OCCUPIED_MAX = 4,
-									
-									GAME_STATE_PLAYING = 0,
-									GAME_STATE_FAILED = -1,
-									GAME_STATE_COMPLETED = 1,
-									
-									ITEM_BOMB_DAMAGE = 1,
-									
-									RESOURCE_ID_INVALID = -1,
-									IDENTITY_ID_INVALID = 0, 
-									
-									ITEM_ID_COIN = 1,
-									ITEM_ID_BOMB1 = 2,
-									
-									TOUCHSCREEN_CONTROL_C4 = 1,
-									TOUCHSCREEN_CONTROL_E6 = 2,		
-									TOUCHSCREEN_POINTERS_COUNT_MAX = 2,
-									
-									GRAPHICS_MATRIX_SIZE = 16,
-									MIXER_VOLUME_MAX = 100,
-									
-									FILESYSTEM_MARK_MAX = 123456789;
-	
-	static final public long 		GAME_FPS = 30, 
-									GAME_TIME_SLEEPING = 1000 / GAME_FPS,
-								
-									MOB_TIME_WAITING_AVERAGE = 1500,
-									MOB_TIME_WAITING_DELTA = 400,
-									ITEM_BUFF_TIME_INFINITE = -1;
-									
-	static final public float 		COMPARISON_PRECISION = 1E-13f,
-									MAP_CELL_PRECISION = 1E-5f,
-									
-									SCORE_MULTIPLIER_INITIAL = 1.0f;
-}
Index: app/src/main/app/app.iml
===================================================================
--- app/src/main/app/app.iml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/app.iml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,93 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":app" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="Zetta" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":app" />
-      </configuration>
-    </facet>
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="SELECTED_BUILD_VARIANT" value="debug" />
-        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
-        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
-        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugAndroidTest" />
-        <option name="COMPILE_JAVA_TEST_TASK_NAME" value="compileDebugAndroidTestSources" />
-        <afterSyncTasks>
-          <task>generateDebugAndroidTestSources</task>
-          <task>generateDebugSources</task>
-        </afterSyncTasks>
-        <option name="ALLOW_USER_CONFIGURATION" value="false" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_6" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
-    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/androidTest/debug" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/androidTest/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/androidTest/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/androidTest/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/androidTest/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
-      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android API 17 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" name="support-v4-18.0.0" level="project" />
-  </component>
-</module>
\ No newline at end of file
Index: app/src/main/app/build/generated/source/buildConfig/androidTest/debug/com/example/zetta/test/BuildConfig.java
===================================================================
--- app/src/main/app/build/generated/source/buildConfig/androidTest/debug/com/example/zetta/test/BuildConfig.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/build/generated/source/buildConfig/androidTest/debug/com/example/zetta/test/BuildConfig.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,13 +0,0 @@
-/**
- * Automatically generated file. DO NOT MODIFY
- */
-package com.example.zetta.test;
-
-public final class BuildConfig {
-  public static final boolean DEBUG = Boolean.parseBoolean("true");
-  public static final String APPLICATION_ID = "com.example.zetta.test";
-  public static final String BUILD_TYPE = "debug";
-  public static final String FLAVOR = "";
-  public static final int VERSION_CODE = -1;
-  public static final String VERSION_NAME = "";
-}
Index: app/src/main/app/build/intermediates/manifest/androidTest/debug/AndroidManifest.xml
===================================================================
--- app/src/main/app/build/intermediates/manifest/androidTest/debug/AndroidManifest.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/build/intermediates/manifest/androidTest/debug/AndroidManifest.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,16 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.example.zetta.test">
-
-    <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="10" />
-
-    <application>
-        <uses-library android:name="android.test.runner" />
-    </application>
-
-    <instrumentation android:name="android.test.InstrumentationTestRunner"
-                     android:targetPackage="com.example.zetta"
-                     android:handleProfiling="false"
-                     android:functionalTest="false"
-                     android:label="Tests for com.example.zetta"/>
-</manifest>
Index: app/src/main/app/src/main/res/raw/effects.txt
===================================================================
--- app/src/main/app/src/main/res/raw/effects.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/raw/effects.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,1 +0,0 @@
-
\ No newline at end of file
Index: app/src/main/app/src/main/res/values/dimens.xml
===================================================================
--- app/src/main/app/src/main/res/values/dimens.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/values/dimens.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,7 +0,0 @@
-<resources>
-
-    <!-- Default screen margins, per the Android Design guidelines. -->
-    <dimen name="activity_horizontal_margin">16dp</dimen>
-    <dimen name="activity_vertical_margin">16dp</dimen>
-
-</resources>
\ No newline at end of file
Index: app/src/main/app/build/generated/source/buildConfig/debug/com/example/zetta/BuildConfig.java
===================================================================
--- app/src/main/app/build/generated/source/buildConfig/debug/com/example/zetta/BuildConfig.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/build/generated/source/buildConfig/debug/com/example/zetta/BuildConfig.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,13 +0,0 @@
-/**
- * Automatically generated file. DO NOT MODIFY
- */
-package com.example.zetta;
-
-public final class BuildConfig {
-  public static final boolean DEBUG = Boolean.parseBoolean("true");
-  public static final String APPLICATION_ID = "com.example.zetta";
-  public static final String BUILD_TYPE = "debug";
-  public static final String FLAVOR = "";
-  public static final int VERSION_CODE = 1;
-  public static final String VERSION_NAME = "";
-}
Index: app/src/main/app/src/main/res/values-sw600dp/dimens.xml
===================================================================
--- app/src/main/app/src/main/res/values-sw600dp/dimens.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/values-sw600dp/dimens.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,8 +0,0 @@
-<resources>
-
-    <!--
-         Customize dimensions originally defined in res/values/dimens.xml (such as
-         screen margins) for sw600dp devices (e.g. 7" tablets) here.
-    -->
-
-</resources>
\ No newline at end of file
Index: app/src/main/app/src/main/java/com/example/zetta/entity/ZScore.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/entity/ZScore.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/entity/ZScore.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,74 +0,0 @@
-package com.example.zetta.entity;
-
-import com.example.zetta.ZConstants;
-
-public final class ZScore 
-{
-	public float amount,
-		factorTimerTicked, factorPlayerMoved, factorItemPicked, factorMobKilled, factorLevelPassed;
-	
-	public ZScore()
-	{
-		amount = 0f; 
-		factorTimerTicked = factorPlayerMoved = factorItemPicked = 
-			factorMobKilled = factorLevelPassed = ZConstants.SCORE_MULTIPLIER_INITIAL;
-	}
-	
-	public ZScore(ZScore s)
-	{
-		amount = s.amount;
-		factorTimerTicked = s.factorTimerTicked;
-		factorPlayerMoved = s.factorPlayerMoved;
-		factorItemPicked = s.factorItemPicked;
-		factorMobKilled = s.factorMobKilled;
-		factorLevelPassed = s.factorLevelPassed;
-	}
-	
-	public ZScore(float amount)
-	{
-		this.amount = amount;
-		factorTimerTicked = factorPlayerMoved = factorItemPicked = 
-			factorMobKilled = factorLevelPassed = ZConstants.SCORE_MULTIPLIER_INITIAL;
-	}
-	
-	public void setMultiplier(float factor)
-	{
-		factorTimerTicked = factorPlayerMoved = factorItemPicked = 
-			factorMobKilled = factorLevelPassed = factor;
-	}
-	
-	public void setMultiplier(float factorTimerTicked, float factorPlayerMoved, float factorItemPicked,
-			float factorMobKilled, float factorLevelPassed)
-	{
-		this.factorTimerTicked = factorTimerTicked;
-		this.factorPlayerMoved = factorPlayerMoved;
-		this.factorItemPicked = factorItemPicked;
-		this.factorMobKilled = factorMobKilled;
-		this.factorLevelPassed = factorLevelPassed;
-	}
-	
-	public void timerTicked(long time)
-	{
-		amount += ((float)time) * factorTimerTicked;
-	}
-	
-	public void playerMoved(float distance)
-	{
-		amount += distance * factorPlayerMoved;
-	}
-	
-	public void itemPicked(int score)
-	{
-		amount += ((float)score) * factorItemPicked;
-	}
-	
-	public void mobKilled(int score)
-	{
-		amount += ((float)score) * factorMobKilled;
-	}
-	
-	public void levelPassed(int score)
-	{
-		amount += ((float)score) * factorLevelPassed;
-	}
-}
Index: app/src/main/app/src/main/res/values/strings.xml
===================================================================
--- app/src/main/app/src/main/res/values/strings.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/values/strings.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-
-    <string name="app_name">Zetta</string>
-    <string name="action_settings">Settings</string>
-    <string name="hello_world">Hello world!</string>
-
-</resources>
\ No newline at end of file
Index: app/src/main/app/src/main/java/com/example/zetta/entity/ZEffect.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/entity/ZEffect.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/entity/ZEffect.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,96 +0,0 @@
-package com.example.zetta.entity;
-
-import com.example.zetta.core.ZGame;
-import com.example.zetta.core.ZGraphics;
-import com.example.zetta.core.ZGraphics.IteratableAnimation;
-import com.example.zetta.core.ZPhysics;
-import com.example.zetta.core.ZGame.Identity;
-
-public final class ZEffect extends Identity
-{
-	public class GraphicsData extends ZGraphics.GraphicsData
-	{
-		IteratableAnimation animation;
-		
-		public GraphicsData()
-		{
-			super();
-			animation = new IteratableAnimation();
-		}
-		
-		public GraphicsData(IteratableAnimation _animation)
-		{
-			super();
-			animation = new IteratableAnimation(_animation);
-		}
-		
-		public GraphicsData(GraphicsData d)
-		{
-			super(d);
-			animation = new IteratableAnimation(d.animation);
-		}
-
-		@Override
-		public void draw() 
-		{
-			animation.draw();
-		}
-
-		@Override
-		public void update(long timeElapsed)
-		{
-			animation.setModelPosition(physicsData.position);
-			animation.setModelSizeHalfMapCell();
-			animation.update(timeElapsed);
-		}
-	}
-
-	public class PhysicsData extends ZPhysics.PhysicsData
-	{
-		public long time, timeDestroy;
-		
-		public PhysicsData()
-		{
-			super();
-		}
-		
-		public PhysicsData(PhysicsData d)
-		{
-			super(d);
-		}
-		
-		@Override
-		public void update(long timeElapsed) 
-		{
-			time += timeElapsed;
-			if (time >= timeDestroy)
-			{
-				destroy();
-			}
-		}
-	}
-	
-	public GraphicsData graphicsData;
-	public PhysicsData physicsData;
-
-	public ZEffect()
-	{
-		super();
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-	}
-	
-	public ZEffect(ZEffect e)
-	{
-		super(e);
-		graphicsData = new GraphicsData(e.graphicsData);
-		physicsData = new PhysicsData(e.physicsData);
-	}
-	
-	@Override
-	public void onDestroy() 
-	{
-		ZPhysics.wasEffectDestroyed = true;
-		ZGame.level.map.cells[(int)physicsData.position.y][(int)physicsData.position.x].effect = null;
-	}
-}
Index: app/src/main/app/src/main/java/com/example/zetta/entity/ZCell.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/entity/ZCell.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/entity/ZCell.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,30 +0,0 @@
-package com.example.zetta.entity;
-
-public final class ZCell 
-{
-	public ZObject object = null;
-	public ZMachinery machinery = null;
-	public ZItem item = null;
-	public ZEffect effect = null;
-	
-	public ZCell()
-	{
-
-	}
-	
-	public ZCell(ZObject _object, ZMachinery _machinery, ZItem _item, ZEffect _effect)
-	{
-		object = (_object == null) ? null : new ZObject(_object);
-		machinery = (_machinery == null) ? null : new ZMachinery(_machinery);
-		item = (_item == null) ? null : new ZItem(_item);
-		effect = (_effect == null) ? null : new ZEffect(_effect);
-	}
-	
-	public ZCell(ZCell c)
-	{
-		object = (c.object == null) ? null : new ZObject(c.object);
-		machinery = (c.machinery == null) ? null : new ZMachinery(c.machinery);
-		item = (c.item == null) ? null : new ZItem(c.item);
-		effect = (effect == null) ? null : new ZEffect(c.effect);
-	}
-}
Index: app/src/main/app/src/main/java/com/example/zetta/ZSettings.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/ZSettings.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/ZSettings.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,50 +0,0 @@
-package com.example.zetta;
-
-import com.example.zetta.ZPrimitive.Size2f;
-import com.example.zetta.ZPrimitive.Size2i;
-
-import static java.lang.Math.min;
-
-public final class ZSettings 
-{
-	static public boolean 		SCREEN_FULLSCREEN = true;
-	static public float 		SCREEN_RATIO, SCREEN_RESOLUTION_RELATIVE = 2.0f;
-	static public Size2i 		SCREEN_RESOLUTION_ABSOLUTE; 
-	static public Size2f 		MAP_CELL_SIZE_RELATIVE, GUI_CELL_SIZE_RELATIVE;
-	static public int 			MAP_CELL_SIZE_ABSOLUTE/* = 64*/, GUI_CELL_SIZE_ABSOLUTE/* = 32*/,
-								TOUCHSCREEN_CONTROL = ZConstants.TOUCHSCREEN_CONTROL_E6;
-
-	static public int           MAP_CELLS_PER_SCREEN_MINSIZE = 8,
-								GUI_CELLS_PER_SCREEN_MINSIZE= 16;
-	
-	static public boolean		MAP_GRID = true, 
-								MAP_CELL_HIGHLIGHT_PLAYER = true,
-								MAP_CELL_OBJECT_PASS_HELP = true;
-	
-	static 
-	{
-		MAP_CELL_SIZE_RELATIVE = new ZPrimitive.Size2f();
-		GUI_CELL_SIZE_RELATIVE = new ZPrimitive.Size2f();
-		SCREEN_RESOLUTION_ABSOLUTE = new ZPrimitive.Size2i();
-	}
-	
-	static public void SetScreenResolution(int width, int height)
-	{
-		
-		SCREEN_RESOLUTION_ABSOLUTE.width = width; SCREEN_RESOLUTION_ABSOLUTE.height = height;
-		SCREEN_RATIO = (float)width / height;
-		int minSize = min(width, height);
-
-		MAP_CELL_SIZE_ABSOLUTE = minSize / MAP_CELLS_PER_SCREEN_MINSIZE;
-		GUI_CELL_SIZE_ABSOLUTE = minSize / GUI_CELLS_PER_SCREEN_MINSIZE;
-		
-		MAP_CELL_SIZE_RELATIVE.set(	SCREEN_RESOLUTION_RELATIVE *
-									(float)MAP_CELL_SIZE_ABSOLUTE / width, 
-									SCREEN_RESOLUTION_RELATIVE * 
-									(float)MAP_CELL_SIZE_ABSOLUTE / height);
-		GUI_CELL_SIZE_RELATIVE.set(	SCREEN_RESOLUTION_RELATIVE * 
-									(float)GUI_CELL_SIZE_ABSOLUTE / width, 
-									SCREEN_RESOLUTION_RELATIVE * 
-									(float)GUI_CELL_SIZE_ABSOLUTE / height);
-	}
-}
Index: app/src/main/app/src/main/res/raw/objects.txt
===================================================================
--- app/src/main/app/src/main/res/raw/objects.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/raw/objects.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,8 +0,0 @@
-//id - 1
-0
-0
-1
-1
-9
-0
-0
\ No newline at end of file
Index: app/src/main/app/build/intermediates/tmp/dex/debug/inputList.txt
===================================================================
--- app/src/main/app/build/intermediates/tmp/dex/debug/inputList.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/build/intermediates/tmp/dex/debug/inputList.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,2 +0,0 @@
-E:\Projects\Java\AndroidStudio\Zetta\app\build\intermediates\classes\debug
-E:\Projects\Java\AndroidStudio\Zetta\app\build\intermediates\pre-dexed\debug\support-v4-18.0.0-72fb88aa88e0db7c938d1528d75f12b9cfae6dad.jar
Index: app/src/main/app/lint.xml
===================================================================
--- app/src/main/app/lint.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/lint.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,3 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<lint>
-</lint>
\ No newline at end of file
Index: app/src/main/app/src/main/res/values/styles.xml
===================================================================
--- app/src/main/app/src/main/res/values/styles.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/values/styles.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,20 +0,0 @@
-<resources>
-
-    <!--
-        Base application theme, dependent on API level. This theme is replaced
-        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.
-    -->
-    <style name="AppBaseTheme" parent="android:Theme.Light">
-        <!--
-            Theme customizations available in newer API levels can go in
-            res/values-vXX/styles.xml, while customizations related to
-            backward-compatibility can go here.
-        -->
-    </style>
-
-    <!-- Application theme. -->
-    <style name="AppTheme" parent="AppBaseTheme">
-        <!-- All customizations that are NOT specific to a particular API-level can go here. -->
-    </style>
-
-</resources>
\ No newline at end of file
Index: app/src/main/app/src/main/res/layout/main_layout.xml
===================================================================
--- app/src/main/app/src/main/res/layout/main_layout.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/layout/main_layout.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:orientation="vertical" >
-
-    <CalendarView
-        android:id="@+id/calendarView1"
-        android:layout_width="729dp"
-        android:layout_height="404dp" />
-
-    <DatePicker
-        android:id="@+id/datePicker1"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" />
-
-</LinearLayout>
\ No newline at end of file
Index: app/src/main/app/src/main/res/menu/game.xml
===================================================================
--- app/src/main/app/src/main/res/menu/game.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/menu/game.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,8 +0,0 @@
-<menu xmlns:android="http://schemas.android.com/apk/res/android" >
-
-    <item
-        android:id="@+id/action_settings"
-        android:orderInCategory="100"
-        android:title="@string/action_settings"/>
-
-</menu>
\ No newline at end of file
Index: app/src/main/app/src/main/java/com/example/zetta/entity/ZMachinery.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/entity/ZMachinery.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/entity/ZMachinery.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,134 +0,0 @@
-package com.example.zetta.entity;
-
-import com.example.zetta.core.ZGame;
-import com.example.zetta.core.ZGraphics;
-import com.example.zetta.core.ZGraphics.ReversibleAnimation;
-import com.example.zetta.core.ZPhysics;
-import com.example.zetta.core.ZGame.Identity;
-
-public final class ZMachinery extends Identity
-{
-	public final class GraphicsData extends ZGraphics.GraphicsData
-	{
-		public ReversibleAnimation animation;
-		
-		public GraphicsData()
-		{
-			super();
-			animation = new ReversibleAnimation();
-		}
-		
-		public GraphicsData(ReversibleAnimation _animation)
-		{
-			super();
-			animation = new ReversibleAnimation(_animation);
-		}
-		
-		public GraphicsData(GraphicsData d)
-		{
-			super(d);
-			animation = new ReversibleAnimation(d.animation);
-		}
-
-		@Override
-		public void draw() 
-		{
-			animation.draw();
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			animation.setModelPosition(physicsData.position);
-			animation.setModelSizeHalfMapCell();
-			animation.update(timeElapsed);
-		}
-	}
-	
-	public final class PhysicsData extends ZPhysics.PhysicsData
-	{
-		public int damage, step, stepsCount;
-		public long time;
-		public long[] timesStepSwitching;
-		public boolean isReversible = true;
-		
-		public PhysicsData()
-		{
-			super();
-		}
-		
-		public PhysicsData(PhysicsData d)
-		{
-			super(d);
-			damage = d.damage;
-			step = d.step;
-			stepsCount = d.stepsCount;
-			time = d.time;
-			isReversible = d.isReversible;
-			
-			timesStepSwitching = new long[stepsCount];
-			System.arraycopy(d.timesStepSwitching, 0, timesStepSwitching, 0, stepsCount);
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			time += timeElapsed;
-			if (time > timesStepSwitching[step])
-			{
-				time %= timesStepSwitching[step];
-				if (step == stepsCount - 1)
-				{
-					isReversible = true;
-				}
-				else
-					if (step == 0)
-					{
-						isReversible = false;
-					}
-
-				if (isReversible == true)
-				{
-					--step;
-				}
-				else
-				{
-					++step;
-				}
-			}
-		}
-	}
-	
-	public int score;
-	
-	public GraphicsData graphicsData;
-	public PhysicsData physicsData;
-	
-	public ZMachinery()
-	{
-		super();
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-	}
-	
-	public ZMachinery(int id)
-	{
-		super(id);
-		graphicsData = new GraphicsData();
-		physicsData = new PhysicsData();
-	}
-	
-	public ZMachinery(ZMachinery m)
-	{
-		super(m);
-		graphicsData = new GraphicsData(m.graphicsData);
-		physicsData = new PhysicsData(m.physicsData);
-	}
-
-	@Override
-	public void onDestroy() 
-	{
-		ZPhysics.wasMachineryDestroyed = true;
-		ZGame.level.map.cells[(int)physicsData.position.y][(int)physicsData.position.x].machinery = null;
-	}
-}
Index: app/src/main/app/src/main/res/raw/maps.txt
===================================================================
--- app/src/main/app/src/main/res/raw/maps.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/raw/maps.txt	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,79 +0,0 @@
-// id - 1
-0
-30
-10
-11
-// items
-6
-3
-1
-4
-4
-2
-3
-0
-1
-2
-2
-2
-2
-4
-2
-5
-2
-1
-6
-7
-// objects
-4
-1
-3
-3
-1
-2
-3
-1
-4
-2
-1
-4
-3
-// machineries
-3
-1
-5
-5
-2
-0
-5
-3
-3
-6
-// mobs
-7
-1
-5
-1
-2
-3
-2
-3
-0
-3
-4
-1
-6
-5
-0
-0
-6
-4
-7
-7
-6
-4
-// entities end
-0
-0
-1
-2
\ No newline at end of file
Index: app/src/main/app/src/main/java/com/example/zetta/core/ZFileSystem.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/core/ZFileSystem.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/core/ZFileSystem.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,1187 +0,0 @@
-package com.example.zetta.core;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-
-import com.example.zetta.ZConstants;
-import com.example.zetta.ZLog;
-import com.example.zetta.ZPrimitive;
-import com.example.zetta.ZPrimitive.Point2f;
-import com.example.zetta.ZProperty;
-import com.example.zetta.ZSettings;
-import com.example.zetta.core.ZGraphics.SingleAnimation;
-import com.example.zetta.core.ZGraphics.SpriteResource;
-import com.example.zetta.entity.ZCell;
-import com.example.zetta.entity.ZItem;
-import com.example.zetta.entity.ZMachinery;
-import com.example.zetta.entity.ZMap;
-import com.example.zetta.entity.ZMob;
-import com.example.zetta.entity.ZObject;
-import com.example.zetta.entity.ZPlayer;
-
-public final class ZFileSystem 
-{
-	//TODO WTF CLASS?!?!
-	static public class File
-	{
-		private ArrayList<String> text;
-		private int lineOffset;
-		
-		public File(BufferedReader br)
-		{
-			text = new ArrayList<String>();
-			try
-			{
-				String line;
-				while ((line = br.readLine()) != null)
-				{
-					text.add(line);
-				}
-			}
-			catch(IOException e)
-			{
-				e.printStackTrace();
-			}
-			lineOffset = 0;
-		}
-		
-		public void reset()
-		{
-			lineOffset = 0;
-		}
-		
-		public void readLine()
-		{
-			++lineOffset;
-		}
-		
-		public int getInt()
-		{
-			return Integer.parseInt(text.get(lineOffset++));
-		}
-		
-		public long getLong()
-		{
-			return Long.parseLong(text.get(lineOffset++));
-		}
-		
-		public float getFloat()
-		{
-			return Float.parseFloat(text.get(lineOffset++));
-		}
-		
-		public boolean getBool()
-		{
-			return (Integer.parseInt(text.get(lineOffset++)) == 1) ? true : false;
-		}
-	}
-	//TODO rewrite
-	//static public File entities, graphics, properties;
-	static public BufferedReader bmobs, bmachineries, bitems, bobjects, bmaps, beffects, bplayers;
-	static public SpriteResource[] spriteResources;
-	static public int[] audioResources;
-	
-	//TODO really delete this!
-	static public File mobs, machineries, items, objects, maps, effects, players;
-	//TODO failed
-	
-	//TODO: delete it
-	static private final float[] meshPolygons = new float[]
-	                  		{
-				-1.0f, 	-1.0f, 
-	            1.0f, 	-1.0f, 
-	            -1.0f,  1.0f, 
-	            1.0f,  	1.0f 
-		};
-	static private final float[] meshTexture = new float[]
-	                       {                 
-            0.0f, 1.0f, 
-		      1.0f, 1.0f, 
-		      0.0f, 0.0f, 
-		      1.0f, 0.0f     
-        };
-	//TODO: delete it
-	
-	static void Adjust()
-	{
-		spriteResources = new SpriteResource[]
-	  		{
-				//0
-				new SpriteResource(com.example.zetta.R.drawable.map),
-				new SpriteResource(com.example.zetta.R.drawable.grid),
-	  			new SpriteResource(com.example.zetta.R.drawable.highlight),
-	  			new SpriteResource(com.example.zetta.R.drawable.player),
-	  			new SpriteResource(com.example.zetta.R.drawable.mobs),
-	  			
-	  			//5
-	  			new SpriteResource(com.example.zetta.R.drawable.mobsflying),
-	  			new SpriteResource(com.example.zetta.R.drawable.coin),
-	  			new SpriteResource(com.example.zetta.R.drawable.bomb),
-	  			new SpriteResource(com.example.zetta.R.drawable.machineries),
-	  			new SpriteResource(com.example.zetta.R.drawable.object),
-	  			
-	  			//10
-				new SpriteResource(com.example.zetta.R.drawable.explosion)
-	  		};
-		
-		audioResources = new int[]
-		    {
-				//0
-				com.example.zetta.R.raw.music,
-				com.example.zetta.R.raw.coin,
-				com.example.zetta.R.raw.explosion
-		    };
-		
-		try
-		{
-			bplayers = new BufferedReader(new InputStreamReader(
-					ZGame.resources.openRawResource(com.example.zetta.R.raw.players)));
-			bplayers.mark(ZConstants.FILESYSTEM_MARK_MAX);
-			players = new File(bplayers);
-			bplayers.close();
-			
-			bmobs = new BufferedReader(new InputStreamReader(
-					ZGame.resources.openRawResource(com.example.zetta.R.raw.mobs)));
-			bmobs.mark(ZConstants.FILESYSTEM_MARK_MAX);
-			mobs = new File(bmobs);
-			bmobs.close();
-			
-			bmachineries = new BufferedReader(new InputStreamReader(
-					ZGame.resources.openRawResource(com.example.zetta.R.raw.machineries)));
-			bmachineries.mark(ZConstants.FILESYSTEM_MARK_MAX);
-			machineries = new File(bmachineries);
-			bmachineries.close();
-			
-			bitems = new BufferedReader(new InputStreamReader(
-					ZGame.resources.openRawResource(com.example.zetta.R.raw.items)));
-			bitems.mark(ZConstants.FILESYSTEM_MARK_MAX);
-			items = new File(bitems);
-			bitems.close();
-			
-			bobjects = new BufferedReader(new InputStreamReader(
-					ZGame.resources.openRawResource(com.example.zetta.R.raw.objects)));
-			bobjects.mark(ZConstants.FILESYSTEM_MARK_MAX);
-			objects = new File(bobjects);
-			bobjects.close();
-			
-			bmaps = new BufferedReader(new InputStreamReader(
-					ZGame.resources.openRawResource(com.example.zetta.R.raw.maps)));
-			bmaps.mark(ZConstants.FILESYSTEM_MARK_MAX);
-			maps = new File(bmaps);
-			bmaps.close();
-			
-			beffects = new BufferedReader(new InputStreamReader(
-					ZGame.resources.openRawResource(com.example.zetta.R.raw.effects)));
-			beffects.mark(ZConstants.FILESYSTEM_MARK_MAX);
-			effects = new File(beffects);
-			beffects.close();
-		}
-		catch(IOException e)
-		{
-			e.printStackTrace(); //TODO
-		}
-	}
-	
-	static SpriteResource GetSpriteResource(int index)
-	{
-		if (index >= spriteResources.length)
-		{
-			ZLog.d(ZLog.SECURITY_LEVEL_ERROR, ZLog.TAG_ACTIVITY);
-		}
-		spriteResources[index].isUsed = true;
-		return spriteResources[index];
-	}
-	
-	static int GetAudioResource(int index)
-	{
-		return audioResources[index];
-	}
-	
-	static public void LoadStatistics()
-	{
-		//TODO
-		
-	}
-	
-	static public void LoadSettings()
-	{
-		//TODO
-		
-	}
-	
-	static public void LoadProperty()
-	{
-		//TODO
-		try 
-		{
-			Load(ZProperty.player);
-		} 
-		catch (IOException e) 
-		{
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-	}
-	
-	//TODO
-	//static public void SaveProperty(ZProperty property); //rewrite and close
-	//static public void UpdateProperty(ZProperty property); //rewrite
-	
-	static public void Load(ZMap map) throws IOException
-	{
-		//TODO: delete??
-		/*map.size.height = 8;
-		map.size.width = 7;
-		map.buff = ZConstants.MAP_NO_BUFFS;
-		map.coinsCount = 2;
-		map.score = 30;
-		map.itemsCount = 5;
-		map.objectsCount = 2;
-		map.machineriesCount = 3;
-		map.mobsCount = 7;
-		
-		int i, j;
-		float[] meshPolygons, meshTexture;
-		meshPolygons = new float[]
- 		{
- 				-1.0f, 	-1.0f, 
- 	            1.0f, 	-1.0f, 
- 	            -1.0f,  1.0f, 
- 	            1.0f,  	1.0f 
- 		};
- 		meshTexture = new float[]
- 		                       {                 
- 	            0.0f, 1.0f, 
- 			      1.0f, 1.0f, 
- 			      0.0f, 0.0f, 
- 			      1.0f, 0.0f     
- 	        };
- 		map.items = new ArrayList<ZItem>(map.itemsCount);
- 		map.items.add(new ZItem()); 
- 		item.buff = null; 
- 		map.items.get(0).id = 1; 
- 		map.items.get(0).score = 3; 
- 		map.items.get(0).physicsData.position.set(4, 4);
-	
-		i = 0;
-		map.items.get(0).graphicsData.image.textureSize.width = 1;
-		map.items.get(0).graphicsData.image.textureSize.height = 1;
-		map.items.get(0).graphicsData.image.texturePosition.set(0, 0);
-		map.items.get(0).graphicsData.image.setMeshes(meshPolygons, meshTexture);
-		map.items.get(0).graphicsData.postAnimation = null;
-
-		map.items.add(new ZItem(map.items.get(0))); map.items.get(1).id = 0; map.items.get(1).physicsData.position.set(3, 0);
-		map.items.add(new ZItem(map.items.get(0))); map.items.get(2).physicsData.position.set(2, 2);
-		map.items.add(new ZItem(map.items.get(0))); map.items.get(3).physicsData.position.set(2, 4);
-		map.items.add(new ZItem(map.items.get(0))); map.items.get(4).physicsData.position.set(5, 2);
-		for (i = 0; i < map.itemsCount; ++i)
-		{
-			if (i % 2 == 0 && i != 4)
-			{
-				map.items.get(i).id = ZConstants.ITEM_ID_COIN;
-				map.items.get(i).graphicsData.image.resource = GetSpriteResource(6);
-				map.items.get(i).sequencerData.sound.set(com.example.zetta.R.raw.coin, ZConstants.sv);
-			}
-			else
-			{
-				map.items.get(i).id = ZConstants.ITEM_ID_BOMB1;
-				map.items.get(i).graphicsData.image.resource = GetSpriteResource(7);
-				map.items.get(i).graphicsData.image.textureSize.width = 1f;
-				
-				map.items.get(i).graphicsData.image.textureSize.height = 1;
-				map.items.get(i).graphicsData.image.texturePosition.set(0, 0);
-				map.items.get(i).sequencerData.sound.set(com.example.zetta.R.raw.explosion, ZConstants.sv);
-				
-				map.items.get(i).graphicsData.postAnimation = new SingleAnimation();
-				map.items.get(i).graphicsData.postAnimation.setMeshes(meshPolygons, meshTexture);
-				map.items.get(i).graphicsData.postAnimation.isPlaying = false;
-				map.items.get(i).graphicsData.postAnimation.step = 0;
-				map.items.get(i).graphicsData.postAnimation.textureSize.height = 1f;
-				map.items.get(i).graphicsData.postAnimation.textureSize.width = 1f / 27f;
-				map.items.get(i).graphicsData.postAnimation.texturePosition = new Point2f(0f, 0f);
-				map.items.get(i).graphicsData.postAnimation.stepsCount = 27;
-				map.items.get(i).graphicsData.postAnimation.timeStepSwitching = (long)(525f / 27f);
-				map.items.get(i).graphicsData.postAnimation.resource = GetSpriteResource(10);
-			}
-		}
-		
-		map.objects = new ArrayList<ZObject>(map.objectsCount);	
-		map.objects.add(new ZObject()); map.objects.get(0).id = 1; map.objects.get(0).physicsData.damage = 0;
-		map.objects.get(0).physicsData.direction = 0; map.objects.get(0).physicsData.position.set(3, 3);
-		
-		i = 0;
-		map.objects.get(i).graphicsData.image.textureSize.width = 1;
-		map.objects.get(i).graphicsData.image.textureSize.height = 1;
-		map.objects.get(i).graphicsData.image.resource = GetSpriteResource(9);
-		map.objects.get(i).graphicsData.image.texturePosition.set(0, 0);
-		map.objects.get(i).graphicsData.image.setMeshes(meshPolygons, meshTexture);
-		
-		map.objects.add(new ZObject(map.objects.get(0))); map.objects.get(1).physicsData.position.set(2, 3);
-		
-		map.machineries = new ArrayList<ZMachinery>(map.machineriesCount);
-		for (i = 0; i < map.machineriesCount; ++i)
-		{
-			map.machineries.add(new ZMachinery());
-			map.machineries.get(i).id = (short)(i + 1);
-			map.machineries.get(i).score = (short)(i + 1);
-			map.machineries.get(i).physicsData.step = 0;
-			map.machineries.get(i).physicsData.stepsCount = 4;
-			map.machineries.get(i).physicsData.time = 0;
-			map.machineries.get(i).physicsData.damage = 1;
-			map.machineries.get(i).graphicsData.animation.resource = GetSpriteResource(8);
-			map.machineries.get(i).graphicsData.animation.textureSize.height = 1f / 4f;
-			map.machineries.get(i).graphicsData.animation.textureSize.width = 1f / 4f;
-			map.machineries.get(i).graphicsData.animation.setMeshes(meshPolygons, meshTexture);
-			map.machineries.get(i).graphicsData.animation.modelSizeHalf.set(ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2, 
-					ZSettings.MAP_CELL_SIZE_RELATIVE.height);
-			
-			map.machineries.get(i).graphicsData.animation.isPlaying = true;
-			map.machineries.get(i).graphicsData.animation.step = 0;
-			map.machineries.get(i).graphicsData.animation.stepsCount = 4;
-			map.machineries.get(i).graphicsData.animation.time = 0;
-			map.machineries.get(i).graphicsData.animation.texturePosition.set(0, (float)(int)i / 4f);
-		}
-		map.machineries.get(0).physicsData.position.set(5, 5);
-		map.machineries.get(0).physicsData.timesStepSwitching = new long[]{350, 350, 350, 350};
-		map.machineries.get(0).graphicsData.animation.timesStepSwitching = new long[]{350, 350, 350, 350};
-		map.machineries.get(1).physicsData.position.set(0, 5);
-		map.machineries.get(1).physicsData.timesStepSwitching = new long[]{480, 480, 480, 480};
-		map.machineries.get(1).graphicsData.animation.timesStepSwitching = new long[]{480, 480, 480, 480};
-		map.machineries.get(2).physicsData.position.set(3, 6);
-		map.machineries.get(2).physicsData.timesStepSwitching = new long[]{2450, 2450, 2450, 2450};
-		map.machineries.get(2).graphicsData.animation.timesStepSwitching = new long[]{2450, 2450, 2450, 2450};
-		
-		map.machineries.get(1).graphicsData.animation.texturePosition.set(0, (float)(int)3f / 4f);
-		
-		map.mobs = new ArrayList<ZMob>(map.mobsCount);
-		map.mobs.add(new ZMob());
-		i = 0;
-		map.mobs.get(i).id = 1;
-		map.mobs.get(i).score = 4;
-		map.mobs.get(i).physicsData.damage = 1;
-		map.mobs.get(i).physicsData.detectionDistance = 3;
-		map.mobs.get(i).physicsData.direction = ZConstants.DIRECTION_DOWN;
-		map.mobs.get(i).physicsData.health = 1;
-		map.mobs.get(i).physicsData.isFlying = false;
-		map.mobs.get(i).physicsData.isImmortal = false;
-		map.mobs.get(i).physicsData.isHostile = false; /////
-		map.mobs.get(i).physicsData.isMoving = false;
-		map.mobs.get(i).aiData.isPursuing = false;
-		map.mobs.get(i).physicsData.isSpectral = false;
-		map.mobs.get(i).physicsData.speed = 0.0013f;
-		map.mobs.get(i).physicsData.setPosition(5, 1);
-		map.mobs.get(i).graphicsData.animationOnMoving.resource = GetSpriteResource(4);
-		map.mobs.get(i).graphicsData.animationOnMoving.isPlaying = false;
-		map.mobs.get(i).graphicsData.animationOnMoving.state = 0;
-		map.mobs.get(i).graphicsData.animationOnMoving.statesCount = 4;
-		map.mobs.get(i).graphicsData.animationOnMoving.step = 0;
-		map.mobs.get(i).graphicsData.animationOnMoving.stepsCount = new int[] {3, 3, 3, 3};
-		map.mobs.get(i).graphicsData.animationOnMoving.stepSwitchTime = 85;
-		map.mobs.get(i).graphicsData.animationOnMoving.time = 0;
-		map.mobs.get(i).graphicsData.animationOnMoving.textureSize.width = 1f / 6f;
-		map.mobs.get(i).graphicsData.animationOnMoving.textureSize.height = 1f / 8f;
-		
-		map.mobs.get(i).graphicsData.animationOnMoving.texturePosition.set(0, 0);
-		map.mobs.get(i).graphicsData.animationOnMoving.texturePositionsInitial = new ZPrimitive.Point2f[4];
-		map.mobs.get(i).graphicsData.animationOnMoving.texturePositionsInitial[0] = new ZPrimitive.Point2f(0, 1f / 8f);
-		map.mobs.get(i).graphicsData.animationOnMoving.texturePositionsInitial[1] = new ZPrimitive.Point2f(0, 3f / 8f);
-		map.mobs.get(i).graphicsData.animationOnMoving.texturePositionsInitial[2] = new ZPrimitive.Point2f(0, 2f / 8f);
-		map.mobs.get(i).graphicsData.animationOnMoving.texturePositionsInitial[3] = new ZPrimitive.Point2f(0, 0);
-		map.mobs.get(i).graphicsData.animationOnMoving.setMeshes(meshPolygons, meshTexture);
-		map.mobs.add(new ZMob(map.mobs.get(0))); map.mobs.get(1).physicsData.setPosition(3, 2);
-		map.mobs.get(1).graphicsData.animationOnMoving.texturePosition.set(3f / 6f, 0);
-		map.mobs.get(1).graphicsData.animationOnMoving.texturePositionsInitial = new ZPrimitive.Point2f[4];
-		map.mobs.get(1).graphicsData.animationOnMoving.texturePositionsInitial[0] = new ZPrimitive.Point2f(3f / 6f, 1f / 8f);
-		map.mobs.get(1).graphicsData.animationOnMoving.texturePositionsInitial[1] = new ZPrimitive.Point2f(3f / 6f, 3f / 8f);
-		map.mobs.get(1).graphicsData.animationOnMoving.texturePositionsInitial[2] = new ZPrimitive.Point2f(3f / 6f, 2f / 8f);
-		map.mobs.get(1).graphicsData.animationOnMoving.texturePositionsInitial[3] = new ZPrimitive.Point2f(3f / 6f, 0);
-		map.mobs.add(new ZMob(map.mobs.get(0))); map.mobs.get(2).physicsData.setPosition(0, 3);
-		map.mobs.get(2).graphicsData.animationOnMoving.texturePosition.set(0, 4f / 8f);
-		map.mobs.get(2).graphicsData.animationOnMoving.texturePositionsInitial = new ZPrimitive.Point2f[4];
-		map.mobs.get(2).graphicsData.animationOnMoving.texturePositionsInitial[0] = new ZPrimitive.Point2f(0, 5f / 8f);
-		map.mobs.get(2).graphicsData.animationOnMoving.texturePositionsInitial[1] = new ZPrimitive.Point2f(0, 7f / 8f);
-		map.mobs.get(2).graphicsData.animationOnMoving.texturePositionsInitial[2] = new ZPrimitive.Point2f(0, 6f / 8f);
-		map.mobs.get(2).graphicsData.animationOnMoving.texturePositionsInitial[3] = new ZPrimitive.Point2f(0, 4f / 8f);
-		map.mobs.add(new ZMob(map.mobs.get(0))); map.mobs.get(3).physicsData.setPosition(1, 6);
-		map.mobs.get(3).graphicsData.animationOnMoving.texturePosition.set(3f / 6f, 4f / 8f);
-		map.mobs.get(3).graphicsData.animationOnMoving.texturePositionsInitial = new ZPrimitive.Point2f[4];
-		map.mobs.get(3).graphicsData.animationOnMoving.texturePositionsInitial[0] = new ZPrimitive.Point2f(3f / 6f, 5f / 8f);
-		map.mobs.get(3).graphicsData.animationOnMoving.texturePositionsInitial[1] = new ZPrimitive.Point2f(3f / 6f, 7f / 8f);
-		map.mobs.get(3).graphicsData.animationOnMoving.texturePositionsInitial[2] = new ZPrimitive.Point2f(3f / 6f, 6f / 8f);
-		map.mobs.get(3).graphicsData.animationOnMoving.texturePositionsInitial[3] = new ZPrimitive.Point2f(3f / 6f, 4f / 8f);
-		
-		map.mobs.add(new ZMob(map.mobs.get(0))); map.mobs.get(4).physicsData.setPosition(0, 0);
-		map.mobs.get(4).graphicsData.animationOnMoving.textureSize.width = 1f / 9f;
-		map.mobs.get(4).graphicsData.animationOnMoving.textureSize.height = 1f / 4f;
-		map.mobs.get(4).graphicsData.animationOnMoving.texturePosition.set(0, 0);
-		map.mobs.get(4).graphicsData.animationOnMoving.texturePositionsInitial = new ZPrimitive.Point2f[4];
-		map.mobs.get(4).graphicsData.animationOnMoving.texturePositionsInitial[0] = new ZPrimitive.Point2f(0, 1f / 4f);
-		map.mobs.get(4).graphicsData.animationOnMoving.texturePositionsInitial[1] = new ZPrimitive.Point2f(0, 3f / 4f);
-		map.mobs.get(4).graphicsData.animationOnMoving.texturePositionsInitial[2] = new ZPrimitive.Point2f(0, 2f / 4f);
-		map.mobs.get(4).graphicsData.animationOnMoving.texturePositionsInitial[3] = new ZPrimitive.Point2f(0, 0f / 4f);
-		map.mobs.get(4).graphicsData.animationOnMoving.resource = GetSpriteResource(5);
-		map.mobs.add(new ZMob(map.mobs.get(4))); map.mobs.get(5).physicsData.setPosition(4, 7);
-		map.mobs.get(5).graphicsData.animationOnMoving.texturePosition.set(3f / 9f, 0);
-		map.mobs.get(5).graphicsData.animationOnMoving.texturePositionsInitial = new ZPrimitive.Point2f[4];
-		map.mobs.get(5).graphicsData.animationOnMoving.texturePositionsInitial[0] = new ZPrimitive.Point2f(3f / 9f, 1f / 4f);
-		map.mobs.get(5).graphicsData.animationOnMoving.texturePositionsInitial[1] = new ZPrimitive.Point2f(3f / 9f, 3f / 4f);
-		map.mobs.get(5).graphicsData.animationOnMoving.texturePositionsInitial[2] = new ZPrimitive.Point2f(3f / 9f, 2f / 4f);
-		map.mobs.get(5).graphicsData.animationOnMoving.texturePositionsInitial[3] = new ZPrimitive.Point2f(3f / 9f, 0f / 4f);
-		map.mobs.add(new ZMob(map.mobs.get(4))); map.mobs.get(6).physicsData.setPosition(6, 4);
-		map.mobs.get(6).graphicsData.animationOnMoving.texturePosition.set(6f / 9f, 0);
-		map.mobs.get(6).graphicsData.animationOnMoving.texturePositionsInitial = new ZPrimitive.Point2f[4];
-		map.mobs.get(6).graphicsData.animationOnMoving.texturePositionsInitial[0] = new ZPrimitive.Point2f(6f / 9f, 1f / 4f);
-		map.mobs.get(6).graphicsData.animationOnMoving.texturePositionsInitial[1] = new ZPrimitive.Point2f(6f / 9f, 3f / 4f);
-		map.mobs.get(6).graphicsData.animationOnMoving.texturePositionsInitial[2] = new ZPrimitive.Point2f(6f / 9f, 2f / 4f);
-		map.mobs.get(6).graphicsData.animationOnMoving.texturePositionsInitial[3] = new ZPrimitive.Point2f(6f / 9f, 0f / 4f);
-		
-		
-		map.cells = new ZCell[map.size.height][map.size.width];
-		for (i = 0; i < map.size.height; ++i)
-		{
-			for (j = 0; j < map.size.width; ++ j)
-			{
-				map.cells[i][j] = new ZCell();
-			}
-		}
-
-		for (i = 0; i < map.objectsCount; ++i)
-		{
-			map.cells[(int)map.objects.get(i).physicsData.position.y]
-			          [(int)map.objects.get(i).physicsData.position.x].object = map.objects.get(i);
-		}
-		for (i = 0; i < map.effectsCount; ++i)
-		{
-			map.cells[(int)map.effects.get(i).physicsData.position.y]
-			          [(int)map.effects.get(i).physicsData.position.x].effect = map.effects.get(i);
-		}
-		for (i = 0; i < map.machineriesCount; ++i)
-		{
-			map.cells[(int)map.machineries.get(i).physicsData.position.y]
-			          [(int)map.machineries.get(i).physicsData.position.x].machinery = map.machineries.get(i);
-		}
-		for (i = 0; i < map.itemsCount; ++i)
-		{
-			map.cells[(int)map.items.get(i).physicsData.position.y]
-			          [(int)map.items.get(i).physicsData.position.x].item = map.items.get(i);
-		}
-		
-		////
-		////
-		
-		map.graphicsData.tile.textureSize.width = (float)map.size.width;
-		map.graphicsData.tile.textureSize.height = (float)map.size.height;
-		map.graphicsData.tile.resource = GetSpriteResource(0);
-		map.graphicsData.tile.texturePosition.set(0, 0);
-		
-		map.graphicsData.tile.setMeshes(meshPolygons, meshTexture);
-
-		ZGame.level.map.graphicsData.tile.modelSizeHalf.set(
-				(float)(int)ZGame.level.map.size.width * ZSettings.MAP_CELL_SIZE_RELATIVE.width / (float)2,
-				(float)(int)ZGame.level.map.size.height * ZSettings.MAP_CELL_SIZE_RELATIVE.height / (float)2);
-		map.graphicsData.tile.modelSizeHalf.set((float)map.size.width * ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2,
-											(float)map.size.height * ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2);
-		map.sequencerData.music.set(com.example.zetta.R.raw.music, ZConstants.mv);
-		
-		//TODO: delete it
-		map.graphicsData.grid.resource = GetSpriteResource(1);
-		map.graphicsData.grid.setMeshes(ZGame.level.map.graphicsData.tile.modelMesh,
-				ZGame.level.map.graphicsData.tile.textureMesh);
-		map.graphicsData.grid.textureSize.width = (float)(int)ZGame.level.map.size.width;
-		map.graphicsData.grid.textureSize.height = (float)(int)ZGame.level.map.size.height;
-		map.graphicsData.grid.texturePosition.set(0, 0);
-		map.graphicsData.grid.modelPosition.set(0f, 0f);
-		
-		//TODO: delete it
-		map.graphicsData.grid.modelSizeHalf.set(ZGame.level.map.graphicsData.tile.modelSizeHalf.width,
-				ZGame.level.map.graphicsData.tile.modelSizeHalf.height);
-		
-		//TODO: delete it
-		map.graphicsData.playerHighlight.resource = GetSpriteResource(2);
-		map.graphicsData.playerHighlight.setMeshes(meshPolygons, meshTexture);
-
-		map.graphicsData.playerHighlight.textureSize.width = 1f;
-		map.graphicsData.playerHighlight.textureSize.height = 1f;
-		map.graphicsData.playerHighlight.modelSizeHalf.set(
-				ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2,
-				ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2);
-		
-		map.graphicsData.playerHighlight.texturePosition.set(0, 0);
-		*/
-		
-		
-		int i, j;
-		for (int k = 0; k < map.id; ++k)
-		{
-			maps.readLine(); // info
-			
-			map.buff = GetInt(maps);
-			map.score = GetInt(maps);
-			map.size.width = GetInt(maps);
-			map.size.height = GetInt(maps);
-			
-	 		////////////////////
-			maps.readLine(); // info
-			map.itemsCount = GetInt(maps);
-			map.coinsCount = GetInt(maps);
-	 		map.items = new ArrayList<ZItem>(map.itemsCount);
-	 		for (i = 0; i < map.itemsCount; ++i)
-	 		{
-	 			map.items.add(new ZItem(GetInt(maps))); 
-	 			map.items.get(i).physicsData.position.set(GetFloat(maps), GetFloat(maps));
-	 			Load(map.items.get(i));
-	 		}
-			//
-			
-			///////////////
-			maps.readLine(); // info
-			map.objectsCount = GetInt(maps);
-			map.objects = new ArrayList<ZObject>(map.objectsCount);
-			for (i = 0; i < map.objectsCount; ++i)
-	 		{
-	 			map.objects.add(new ZObject(GetInt(maps))); 
-	 			map.objects.get(i).physicsData.position.set(GetFloat(maps), GetFloat(maps));
-	 			Load(map.objects.get(i));
-	 		}
-			//
-			
-			//////////////////////
-			maps.readLine(); // info
-			map.machineriesCount = GetInt(maps);
-			map.machineries = new ArrayList<ZMachinery>(map.machineriesCount);
-			for (i = 0; i < map.machineriesCount; ++i)
-	 		{
-	 			map.machineries.add(new ZMachinery(GetInt(maps))); 
-	 			map.machineries.get(i).physicsData.position.set(GetFloat(maps), GetFloat(maps));
-	 			Load(map.machineries.get(i));
-	 		}
-			//
-			
-			////////////////////////////
-			maps.readLine(); // info
-			map.mobsCount = GetInt(maps);
-			map.mobs = new ArrayList<ZMob>(map.mobsCount);
-			for (i = 0; i < map.mobsCount; ++i)
-	 		{
-	 			map.mobs.add(new ZMob(GetInt(maps))); 
-	 			map.mobs.get(i).physicsData.position.set(GetFloat(maps), GetFloat(maps));
-	 			Load(map.mobs.get(i));
-	 		}
-			//
-			maps.readLine(); // info
-			
-			map.cells = new ZCell[map.size.height][map.size.width];
-			for (i = 0; i < map.size.height; ++i)
-			{
-				for (j = 0; j < map.size.width; ++ j)
-				{
-					map.cells[i][j] = new ZCell();
-				}
-			}
-
-			for (i = 0; i < map.objectsCount; ++i)
-			{
-				map.cells[(int)map.objects.get(i).physicsData.position.y]
-				          [(int)map.objects.get(i).physicsData.position.x].object = map.objects.get(i);
-			}
-			for (i = 0; i < map.effectsCount; ++i)
-			{
-				map.cells[(int)map.effects.get(i).physicsData.position.y]
-				          [(int)map.effects.get(i).physicsData.position.x].effect = map.effects.get(i);
-			}
-			for (i = 0; i < map.machineriesCount; ++i)
-			{
-				map.cells[(int)map.machineries.get(i).physicsData.position.y]
-				          [(int)map.machineries.get(i).physicsData.position.x].machinery = map.machineries.get(i);
-			}
-			for (i = 0; i < map.itemsCount; ++i)
-			{
-				map.cells[(int)map.items.get(i).physicsData.position.y]
-				          [(int)map.items.get(i).physicsData.position.x].item = map.items.get(i);
-			}
-			
-			map.sequencerData.music.set(GetAudioResource(GetInt(maps)), ZConstants.mv);
-			map.graphicsData.tile.resource = GetSpriteResource(GetInt(maps));
-			map.graphicsData.grid.resource = GetSpriteResource(GetInt(maps));
-			map.graphicsData.playerHighlight.resource = GetSpriteResource(GetInt(maps));
-			
-			map.graphicsData.tile.textureSize.width = (float)map.size.width;
-			map.graphicsData.tile.textureSize.height = (float)map.size.height;
-			map.graphicsData.tile.texturePosition.set(0, 0);
-			map.graphicsData.tile.modelSizeHalf.set(
-					(float)(int)ZGame.level.map.size.width * ZSettings.MAP_CELL_SIZE_RELATIVE.width / (float)2,
-					(float)(int)ZGame.level.map.size.height * ZSettings.MAP_CELL_SIZE_RELATIVE.height / (float)2);
-			map.graphicsData.tile.modelSizeHalf.set((float)map.size.width * ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2,
-												(float)map.size.height * ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2);
-			map.graphicsData.tile.setMeshes(meshPolygons, meshTexture);
-			
-			map.graphicsData.grid.textureSize.width = (float)(int)ZGame.level.map.size.width;
-			map.graphicsData.grid.textureSize.height = (float)(int)ZGame.level.map.size.height;
-			map.graphicsData.grid.texturePosition.set(0, 0);
-			map.graphicsData.grid.modelPosition.set(0f, 0f);
-			map.graphicsData.grid.modelSizeHalf.set(map.graphicsData.tile.modelSizeHalf.width,
-					ZGame.level.map.graphicsData.tile.modelSizeHalf.height);
-			map.graphicsData.grid.setMeshes(meshPolygons, meshTexture);
-
-			map.graphicsData.playerHighlight.textureSize.width = 1f;
-			map.graphicsData.playerHighlight.textureSize.height = 1f;
-			map.graphicsData.playerHighlight.modelSizeHalf.set(ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2,
-					ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2);
-			map.graphicsData.playerHighlight.texturePosition.set(0, 0);
-			map.graphicsData.playerHighlight.setMeshes(meshPolygons, meshTexture);
-		}
-		
-		maps.reset();
-		
-		
-		
-		/*map.buff = ZConstants.MAP_NO_BUFFS;
-		map.score = 30;
-		
- 		////////////////////
-		map.itemsCount = 5;
-		map.coinsCount = 2;
- 		map.items = new ArrayList<ZItem>(map.itemsCount);
-
- 		map.items.add(new ZItem(1)); 
- 		map.items.add(new ZItem(2)); 
- 		map.items.add(new ZItem(1)); 
- 		map.items.add(new ZItem(2)); 
- 		map.items.add(new ZItem(2)); 
- 		
- 		for (i = 0; i < map.itemsCount; ++i)
- 		{
- 			Load(map.items.get(i));
- 		}
- 		
- 		map.items.get(0).physicsData.position.set(4, 4);
- 		map.items.get(1).physicsData.position.set(3, 0);
-		map.items.get(2).physicsData.position.set(2, 2);
-		map.items.get(3).physicsData.position.set(2, 4);
-		map.items.get(4).physicsData.position.set(5, 2);
-		//
-		
-		///////////////
-		map.objectsCount = 2;
-		map.objects = new ArrayList<ZObject>(map.objectsCount);	
-		map.objects.add(new ZObject(1));
-		map.objects.add(new ZObject(1));
-		
-		for (i = 0; i < map.objectsCount; ++i)
- 		{
- 			Load(map.objects.get(i));
- 		}
-		
-		map.objects.get(0).physicsData.position.set(3, 3);
-		map.objects.get(1).physicsData.position.set(2, 3);
-		//
-		
-		//////////////////////
-		map.machineriesCount = 3;
-		map.machineries = new ArrayList<ZMachinery>(map.machineriesCount);
-		map.machineries.add(new ZMachinery(1));
-		map.machineries.add(new ZMachinery(2));
-		map.machineries.add(new ZMachinery(3));
-		
-		for (i = 0; i < map.machineriesCount; ++i)
- 		{
- 			Load(map.machineries.get(i));
- 		}
-		
-		map.machineries.get(0).physicsData.position.set(5, 5);
-		map.machineries.get(1).physicsData.position.set(0, 5);
-		map.machineries.get(2).physicsData.position.set(3, 6);
-		//
-		
-		////////////////////////////
-		map.mobsCount = 7;
-		map.mobs = new ArrayList<ZMob>(map.mobsCount);
-		map.mobs.add(new ZMob(1));
-		map.mobs.add(new ZMob(2));
-		map.mobs.add(new ZMob(3));
-		map.mobs.add(new ZMob(4));
-		map.mobs.add(new ZMob(5));
-		map.mobs.add(new ZMob(6));
-		map.mobs.add(new ZMob(7));
-
-		for (i = 0; i < map.mobsCount; ++i)
- 		{
- 			Load(map.mobs.get(i));
- 		}
-		map.mobs.get(0).physicsData.setPosition(5, 1);
-		map.mobs.get(1).physicsData.setPosition(3, 2);
-		map.mobs.get(2).physicsData.setPosition(0, 3);
-		map.mobs.get(3).physicsData.setPosition(1, 6);
-		map.mobs.get(4).physicsData.setPosition(0, 0);
-		map.mobs.get(5).physicsData.setPosition(4, 7);
-		map.mobs.get(6).physicsData.setPosition(6, 4);
-		//
-		
-		map.size.height = 8;
-		map.size.width = 7;
-		map.cells = new ZCell[map.size.height][map.size.width];
-		for (i = 0; i < map.size.height; ++i)
-		{
-			for (j = 0; j < map.size.width; ++ j)
-			{
-				map.cells[i][j] = new ZCell();
-			}
-		}
-
-		for (i = 0; i < map.objectsCount; ++i)
-		{
-			map.cells[(int)map.objects.get(i).physicsData.position.y]
-			          [(int)map.objects.get(i).physicsData.position.x].object = map.objects.get(i);
-		}
-		for (i = 0; i < map.effectsCount; ++i)
-		{
-			map.cells[(int)map.effects.get(i).physicsData.position.y]
-			          [(int)map.effects.get(i).physicsData.position.x].effect = map.effects.get(i);
-		}
-		for (i = 0; i < map.machineriesCount; ++i)
-		{
-			map.cells[(int)map.machineries.get(i).physicsData.position.y]
-			          [(int)map.machineries.get(i).physicsData.position.x].machinery = map.machineries.get(i);
-		}
-		for (i = 0; i < map.itemsCount; ++i)
-		{
-			map.cells[(int)map.items.get(i).physicsData.position.y]
-			          [(int)map.items.get(i).physicsData.position.x].item = map.items.get(i);
-		}
-		
-		////
-		////
-		
-		map.graphicsData.tile.textureSize.width = (float)map.size.width;
-		map.graphicsData.tile.textureSize.height = (float)map.size.height;
-		map.graphicsData.tile.resource = GetSpriteResource(0);
-		map.graphicsData.tile.texturePosition.set(0, 0);
-		
-		map.graphicsData.tile.setMeshes(meshPolygons, meshTexture);
-
-		ZGame.level.map.graphicsData.tile.modelSizeHalf.set(
-				(float)(int)ZGame.level.map.size.width * ZSettings.MAP_CELL_SIZE_RELATIVE.width / (float)2,
-				(float)(int)ZGame.level.map.size.height * ZSettings.MAP_CELL_SIZE_RELATIVE.height / (float)2);
-		map.graphicsData.tile.modelSizeHalf.set((float)map.size.width * ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2,
-											(float)map.size.height * ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2);
-		map.sequencerData.music.set(com.example.zetta.R.raw.music, ZConstants.mv);
-		
-		//TODO: delete it
-		map.graphicsData.grid.resource = GetSpriteResource(1);
-		map.graphicsData.grid.setMeshes(ZGame.level.map.graphicsData.tile.modelMesh,
-				ZGame.level.map.graphicsData.tile.textureMesh);
-		map.graphicsData.grid.textureSize.width = (float)(int)ZGame.level.map.size.width;
-		map.graphicsData.grid.textureSize.height = (float)(int)ZGame.level.map.size.height;
-		map.graphicsData.grid.texturePosition.set(0, 0);
-		map.graphicsData.grid.modelPosition.set(0f, 0f);
-		
-		//TODO: delete it
-		map.graphicsData.grid.modelSizeHalf.set(ZGame.level.map.graphicsData.tile.modelSizeHalf.width,
-				ZGame.level.map.graphicsData.tile.modelSizeHalf.height);
-		
-		//TODO: delete it
-		map.graphicsData.playerHighlight.resource = GetSpriteResource(2);
-		map.graphicsData.playerHighlight.setMeshes(meshPolygons, meshTexture);
-
-		map.graphicsData.playerHighlight.textureSize.width = 1f;
-		map.graphicsData.playerHighlight.textureSize.height = 1f;
-		map.graphicsData.playerHighlight.modelSizeHalf.set(
-				ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2,
-				ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2);
-		
-		map.graphicsData.playerHighlight.texturePosition.set(0, 0);*/
-	}
-	
-	static public void Load(ZPlayer player) throws IOException
-	{
-	/////TODO
-		/*player.id = 1;
-		player.score.setMultiplier(1);
-		player.score.amount = 0;
-		player.physicsData.health = 1;
-		player.physicsData.hasInertial = false;
-		player.physicsData.isMoving = false;
-		player.physicsData.speed = 0.003f;
-		player.physicsData.setPosition(1, 1);
-		player.physicsData.direction = ZConstants.DIRECTION_DOWN;
-		float[] meshPolygons = new float[] 
-		{
-				-1.0f, 	-1.0f, 
-	            1.0f, 	-1.0f, 
-	            -1.0f,  1.0f, 
-	            1.0f,  	1.0f 
-		};
-		float[] meshTexture = new float[] 
-		                                     {                 
- 	            0.0f, 1.0f, 
- 			      1.0f, 1.0f, 
- 			      0.0f, 0.0f, 
- 			      1.0f, 0.0f     
- 	        };
-		player.graphicsData.animationOnMoving.setMeshes(meshPolygons, meshTexture);
-		
-		player.graphicsData.animationOnMoving.textureSize.width = 1f / 3f;
-		player.graphicsData.animationOnMoving.textureSize.height = 1f / 4f;
-		player.graphicsData.animationOnMoving.resource = GetSpriteResource(3);
-		player.graphicsData.animationOnMoving.isPlaying = false;
-		player.graphicsData.animationOnMoving.state = 0;
-		player.graphicsData.animationOnMoving.statesCount = 4;
-		player.graphicsData.animationOnMoving.step = 0;
-		player.graphicsData.animationOnMoving.stepsCount = new int[] {3, 3, 3, 3};
-		player.graphicsData.animationOnMoving.stepSwitchTime = 65;
-		player.graphicsData.animationOnMoving.time = 0;
-		player.graphicsData.animationOnMoving.texturePosition.set(0, 0);
-		player.graphicsData.animationOnMoving.texturePositionsInitial = new ZPrimitive.Point2f[4];
-		player.graphicsData.animationOnMoving.texturePositionsInitial[0] = new ZPrimitive.Point2f(0, 0.25f);
-		player.graphicsData.animationOnMoving.texturePositionsInitial[1] = new ZPrimitive.Point2f(0, 0.75f);
-		player.graphicsData.animationOnMoving.texturePositionsInitial[2] = new ZPrimitive.Point2f(0, 0.50f);
-		player.graphicsData.animationOnMoving.texturePositionsInitial[3] = new ZPrimitive.Point2f(0, 0);
-		*/
-		/////
-		
-		players.readLine(); // info
-		
-		player.id = 1;
-		player.score.setMultiplier(1);
-		player.score.amount = 0;
-		
-		player.physicsData.health = GetInt(players);
-		
-		player.physicsData.hasInertial = GetBool(players);
-		
-		player.physicsData.isMoving = GetBool(players);
-		
-		player.physicsData.speed = GetFloat(players);
-		player.physicsData.sizeHalf.set(GetFloat(players) / 2, GetFloat(players) / 2);
-		
-		player.physicsData.position.x = GetFloat(players);
-		player.physicsData.position.y = GetFloat(players);
-		player.physicsData.setCellsOccupied();
-		
-		player.physicsData.direction = GetInt(players);
-		ZTouchScreen.SetDirectionAsync(player.physicsData.direction);
-
-		player.graphicsData.animationOnMoving.setMeshes(meshPolygons, meshTexture);
-		
-		player.graphicsData.animationOnMoving.textureSize.width = 1f / GetFloat(players);
-		player.graphicsData.animationOnMoving.textureSize.height = 1f / GetFloat(players);
-		
-		player.graphicsData.animationOnMoving.resource = GetSpriteResource(GetInt(players));
-		player.graphicsData.animationOnMoving.isPlaying = GetBool(players);
-		player.graphicsData.animationOnMoving.state = GetInt(players);
-		player.graphicsData.animationOnMoving.statesCount = GetInt(players);
-		player.graphicsData.animationOnMoving.step = GetInt(players);
-		player.graphicsData.animationOnMoving.stepsCount = new int[player.graphicsData.animationOnMoving.statesCount];
-		for (int i = 0, n = player.graphicsData.animationOnMoving.statesCount; i < n; ++i)
-		{
-			player.graphicsData.animationOnMoving.stepsCount[i] = GetInt(players);
-		}
-		player.graphicsData.animationOnMoving.stepSwitchTime = GetInt(players);
-		player.graphicsData.animationOnMoving.time = 0;
-		player.graphicsData.animationOnMoving.texturePosition.set(GetFloat(players), GetFloat(players));
-		player.graphicsData.animationOnMoving.texturePositionsInitial = new ZPrimitive.Point2f[
-		        player.graphicsData.animationOnMoving.statesCount];
-		for (int i = 0, n = player.graphicsData.animationOnMoving.statesCount; i < n; ++i)
-		{
-			player.graphicsData.animationOnMoving.texturePositionsInitial[i] = new ZPrimitive.Point2f(
-					GetFloat(players),
-					GetFloat(players));
-		}
-		
-		players.reset();
-	}
-	
-	/*static public void Load(ZBuff buff) throws IOException
-	{
-		for (int i = 0; i < buff.id; ++i)
-		{
-			buffs.readLine(); // info
-			
-			
-		}
-		
-		buffs.reset();
-	}*/
-	//TODO no?
-	
-	static public void Load(ZItem item) throws IOException
-	{	
-		for (int i = 0; i < item.id; ++i)
-		{
-			items.readLine(); // info
-			
-			item.buff = null; 
-			item.score = GetInt(items); 
-			item.sequencerData.postSound.set(GetAudioResource(GetInt(items)), ZConstants.sv);
-		
-			item.graphicsData.image.textureSize.width = 1f / GetFloat(items);
-			item.graphicsData.image.textureSize.height = 1f / GetFloat(items);
-			item.graphicsData.image.texturePosition.set(GetFloat(items), GetFloat(items));
-			item.graphicsData.image.resource = GetSpriteResource(GetInt(items));
-			item.graphicsData.image.setMeshes(meshPolygons, meshTexture);
-			
-			item.graphicsData.postAnimation = (GetBool(items) == true) ? new SingleAnimation() : null;
-			if (item.graphicsData.postAnimation != null)
-			{			
-				item.graphicsData.postAnimation.isPlaying = GetBool(items);;
-				item.graphicsData.postAnimation.step = GetInt(items);
-				item.graphicsData.postAnimation.textureSize.height = 1f / GetFloat(items);
-				item.graphicsData.postAnimation.textureSize.width = 1f / GetFloat(items);
-				item.graphicsData.postAnimation.texturePosition = new Point2f(GetFloat(items), GetFloat(items));
-				item.graphicsData.postAnimation.stepsCount = GetInt(items);
-				item.graphicsData.postAnimation.timeStepSwitching = (long)(GetLong(items) / 
-						(float)item.graphicsData.postAnimation.stepsCount);
-				item.graphicsData.postAnimation.resource = GetSpriteResource(GetInt(items));
-				item.graphicsData.postAnimation.setMeshes(meshPolygons, meshTexture);
-			}
-		}
-		
-		items.reset();
-	}
-	
-	static public void Load(ZMachinery machinery) throws IOException
-	{
-		for (int i = 0; i < machinery.id; ++i)
-		{
-			machineries.readLine(); // info
-			
-			machinery.score = GetInt(machineries);
-			machinery.physicsData.step = GetInt(machineries);
-			machinery.physicsData.stepsCount = GetInt(machineries);
-			machinery.physicsData.time = 0;
-			machinery.physicsData.damage = GetInt(machineries);
-			machinery.physicsData.timesStepSwitching = new long[machinery.physicsData.stepsCount];
-			for (int j = 0; j < machinery.physicsData.stepsCount; ++j)
-			{
-				machinery.physicsData.timesStepSwitching[j] = GetLong(machineries);
-			}
-			
-			machinery.graphicsData.animation.resource = GetSpriteResource(GetInt(machineries));
-			machinery.graphicsData.animation.textureSize.height = 1f / GetFloat(machineries);
-			machinery.graphicsData.animation.textureSize.width = 1f / GetFloat(machineries);		
-			machinery.graphicsData.animation.isPlaying = GetBool(machineries);
-			machinery.graphicsData.animation.step = GetInt(machineries);
-			machinery.graphicsData.animation.stepsCount = GetInt(machineries);
-			machinery.graphicsData.animation.time = GetInt(machineries);
-			machinery.graphicsData.animation.texturePosition.set(GetFloat(machineries), GetFloat(machineries));
-			machinery.graphicsData.animation.timesStepSwitching = new long[machinery.graphicsData.animation.stepsCount];
-			for (int j = 0; j < machinery.graphicsData.animation.stepsCount; ++j)
-			{
-				machinery.graphicsData.animation.timesStepSwitching[j] = GetLong(machineries);
-			}
-			machinery.graphicsData.animation.setMeshes(meshPolygons, meshTexture);
-		}
-		
-		machineries.reset();
-	}
-	
-	static public void Load(ZMob mob) throws IOException
-	{
-		for (int i = 0; i < mob.id; ++i)
-		{
-			mobs.readLine(); // info
-			
-			mob.score = GetInt(mobs);
-			mob.physicsData.damage = GetInt(mobs);
-			mob.physicsData.detectionDistance = GetInt(mobs);
-			mob.physicsData.direction = GetInt(mobs);
-			mob.physicsData.health = GetInt(mobs);
-			mob.physicsData.isFlying = GetBool(mobs);
-			mob.physicsData.isImmortal = GetBool(mobs);
-			mob.physicsData.isMoving = GetBool(mobs);
-			mob.physicsData.isSpectral = GetBool(mobs);
-			mob.physicsData.isHostile = GetBool(mobs);
-			mob.physicsData.speed = GetFloat(mobs);
-			mob.physicsData.sizeHalf.set(GetFloat(mobs) / 2, GetFloat(mobs) / 2);
-			mob.graphicsData.animationOnMoving.resource = GetSpriteResource(GetInt(mobs));
-			mob.graphicsData.animationOnMoving.isPlaying = GetBool(mobs);
-			mob.graphicsData.animationOnMoving.state = GetInt(mobs);
-			mob.graphicsData.animationOnMoving.statesCount = GetInt(mobs);
-			mob.graphicsData.animationOnMoving.step = GetInt(mobs);
-			mob.graphicsData.animationOnMoving.stepsCount = 
-				new int[mob.graphicsData.animationOnMoving.statesCount];
-			for (int j = 0; j < mob.graphicsData.animationOnMoving.statesCount; ++j)
-			{
-				mob.graphicsData.animationOnMoving.stepsCount[j] = GetInt(mobs);
-			}
-			mob.graphicsData.animationOnMoving.stepSwitchTime = GetInt(mobs);
-			mob.graphicsData.animationOnMoving.time = 0;
-			mob.graphicsData.animationOnMoving.textureSize.width = 1f / GetFloat(mobs);
-			mob.graphicsData.animationOnMoving.textureSize.height = 1f / GetFloat(mobs);
-			
-			mob.graphicsData.animationOnMoving.texturePosition.set(GetFloat(mobs), GetFloat(mobs));
-			mob.graphicsData.animationOnMoving.texturePositionsInitial = 
-				new ZPrimitive.Point2f[mob.graphicsData.animationOnMoving.statesCount];
-			for (int j = 0; j < mob.graphicsData.animationOnMoving.statesCount; ++j)
-			{
-				mob.graphicsData.animationOnMoving.texturePositionsInitial[j] = new ZPrimitive.Point2f(GetFloat(mobs),
-					GetFloat(mobs));
-			}
-			mob.graphicsData.animationOnMoving.setMeshes(meshPolygons, meshTexture);
-		}
-		
-		mobs.reset();
-	}
-	
-	static public void Load(ZObject object) throws IOException
-	{
-		for (int i = 0; i < object.id; ++i)
-		{
-			objects.readLine(); // info
-			
-			object.physicsData.damage = GetInt(objects);
-			object.physicsData.direction = GetInt(objects); 
-
-			object.graphicsData.image.textureSize.width = 1f / GetFloat(objects);
-			object.graphicsData.image.textureSize.height = 1f / GetFloat(objects);
-			object.graphicsData.image.resource = GetSpriteResource(GetInt(objects));
-			object.graphicsData.image.texturePosition.set(GetFloat(objects), GetFloat(objects));
-			object.graphicsData.image.setMeshes(meshPolygons, meshTexture);
-		}
-		
-		objects.reset();
-	}
-	
-	
-	//TODO delete them
-	
-	//static private String line;
-	//static private char[] cline = new char[100];
-	//static private StringBuilder sb = new StringBuilder();
-	
-	/*static public int GetInt(BufferedReader br)
-	{
-		int x = -1;
-		try {
-			x = Integer.parseInt(line = br.readLine());
-		}  catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		return x;
-	}
-	
-	static public long GetLong(BufferedReader br)
-	{
-		long x = -1;
-		try {
-			x = Long.parseLong(line = br.readLine());
-		}  catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		return x;
-	}
-	
-	static public float GetFloat(BufferedReader br)
-	{
-		float x = -1;
-		try {
-			GetLine(br);
-			x = Float.parseFloat(line);// = br.readLine());
-		}  catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		return x;
-	}
-	
-	static public boolean GetBool(BufferedReader br)
-	{
-		int x = -1;
-		try {
-			x = Integer.parseInt(line = br.readLine());
-		}  catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		return (x == 0) ? false : true;
-	}*/
-	
-	/*static private void GetLine(BufferedReader br) throws IOException
-	{
-		int i = 1;
-
-		cline[i - 1] = (char)br.read();
-		while(cline[i - 1] != '\n')
-		{
-			cline[i] = (char)br.read();
-			++i;
-		}
-		//line.valueOf(cline, 0, i);
-	}
-	
-	static public int GetInt(BufferedReader br)
-	{
-		int x = -1;
-		try {
-			GetLine(br);
-			x = ParseInt(cline);
-		}  catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		return x;
-	}
-	
-	static public long GetLong(BufferedReader br)
-	{
-		long x = -1;
-		try {
-			GetLine(br);
-			x = ParseLong(cline);
-		}  catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		return x;
-	}
-	
-	static public float GetFloat(BufferedReader br)
-	{
-		float x = -1;
-		try {
-			GetLine(br);
-			x = ParseFloat(cline);
-		}  catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		return x;
-	}
-	
-	static public boolean GetBool(BufferedReader br)
-	{
-		int x = -1;
-		try {
-			GetLine(br);
-			x = ParseInt(cline);
-		}  catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		return (x == 0) ? false : true;
-	}*/
-	
-	static public int GetInt(File file)
-	{
-		return file.getInt();
-	}
-	
-	static public float GetFloat(File file)
-	{
-		return file.getFloat();
-	}
-	
-	static public long GetLong(File file)
-	{
-		return file.getLong();
-	}
-	
-	static public boolean GetBool(File file)
-	{
-		return file.getBool();
-	}
-}
Index: app/src/main/app/src/main/java/com/example/zetta/entity/ZCreature.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/entity/ZCreature.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/entity/ZCreature.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,257 +0,0 @@
-package com.example.zetta.entity;
-
-import com.example.zetta.ZConstants;
-import com.example.zetta.ZPrimitive.Point2f;
-import com.example.zetta.ZPrimitive.Size2f;
-import com.example.zetta.ZPrimitive.Vector2f;
-import com.example.zetta.core.ZGame;
-import com.example.zetta.core.ZGraphics;
-import com.example.zetta.core.ZGraphics.IteratableAnimation;
-import com.example.zetta.core.ZPhysics;
-import com.example.zetta.core.ZGame.Identity;
-
-public abstract class ZCreature extends Identity
-{
-	public abstract class GraphicsData extends ZGraphics.GraphicsData
-	{
-		public IteratableAnimation animationOnMoving;
-		
-		public GraphicsData()
-		{
-			super();
-			animationOnMoving = new IteratableAnimation();
-		}
-		
-		public GraphicsData(IteratableAnimation _animationOnMoving)
-		{
-			super();
-			animationOnMoving = new IteratableAnimation(_animationOnMoving);
-		}
-		
-		public GraphicsData(GraphicsData d)
-		{
-			super(d);
-			animationOnMoving = new IteratableAnimation(d.animationOnMoving);
-		}
-	}
-
-	public abstract class PhysicsData extends ZPhysics.PhysicsData
-	{
-		public int health, direction = ZConstants.DIRECTION_INVALID;
-		public float speed;
-		public boolean isMoving = false;
-		public Vector2f movementVector;
-		public Point2f[] cellsOccupied;
-		public Point2f positionPrevious;
-		public Size2f sizeHalf;
-		public int cellsOccupiedCount;
-		
-		public PhysicsData()
-		{
-			super();	
-			sizeHalf = new Size2f();
-			movementVector = new Vector2f();
-			positionPrevious = new Point2f();
-			cellsOccupied = new Point2f[ZConstants.CREATURE_CELLS_OCCUPIED_MAX];
-			for (int i = 0, n = cellsOccupied.length; i < n; ++i)
-			{
-				cellsOccupied[i] = new Point2f();
-			}
-			cellsOccupiedCount = 0;
-		}
-		
-		public PhysicsData(PhysicsData d)
-		{
-			super(d);
-			health = d.health;
-			speed = d.speed;
-			direction = d.direction;
-			sizeHalf = new Size2f(d.sizeHalf);
-			movementVector = new Vector2f(d.movementVector);
-			positionPrevious = new Point2f(d.positionPrevious);
-			isMoving = d.isMoving;
-			
-			cellsOccupied = new Point2f[ZConstants.CREATURE_CELLS_OCCUPIED_MAX];
-			cellsOccupiedCount = d.cellsOccupiedCount;
-			for (int i = 0, n = cellsOccupied.length; i < n; ++i)
-			{
-				cellsOccupied[i] = new Point2f(d.cellsOccupied[i]);
-			}
-		}
-		
-		/*public void setCellsOccupied()
-		{
-			cellsOccupiedCount = 1;
-			cellsOccupied[0].set((float)(int)position.y, (float)(int)position.x);
-			if (Float.compare(cellsOccupied[0].x, position.y) != 0 ||
-					Float.compare(cellsOccupied[0].y, position.x) != 0)
-			{
-				cellsOccupiedCount = 2;
-				cellsOccupied[1].set((float)Math.ceil((double)position.y), 
-						(float)Math.ceil((double)position.x));
-				if(Float.compare(cellsOccupied[0].x, cellsOccupied[1].x) != 0 &&
-						Float.compare(cellsOccupied[0].y, cellsOccupied[1].y) != 0)
-				{
-					cellsOccupiedCount = 4;
-					cellsOccupied[2].set(cellsOccupied[0].x, cellsOccupied[1].y);
-					cellsOccupied[3].set(cellsOccupied[1].x, cellsOccupied[0].y);
-				}
-			}
-		}*/ //TODO: I have new method
-		
-		public void setCellsOccupied()
-		{		
-			//TODO wtf..?
-			cellsOccupied[0].set((float)(int)position.y, (float)(int)position.x);
-			cellsOccupied[1].set(cellsOccupied[0]); cellsOccupied[1].add(1, 1);
-			cellsOccupied[2].set(cellsOccupied[0]); cellsOccupied[2].add(1, 0);
-			cellsOccupied[3].set(cellsOccupied[0]); cellsOccupied[3].add(0, 1);
-			//TODO ������� ���-������ � 0.5f - s������ ������ ������������
-			
-			if (ZGame.level != null)
-			{
-				if ((int)cellsOccupied[1].x != ZGame.level.map.size.height &&
-						(int)cellsOccupied[1].y != ZGame.level.map.size.width)
-				{
-					if (0.5f + sizeHalf.width > Math.abs(position.x - cellsOccupied[0].y))
-					{
-						if (0.5f + sizeHalf.height <= Math.abs(position.y - cellsOccupied[0].x))
-						{
-							cellsOccupied[0].set(cellsOccupied[2]);
-							cellsOccupiedCount = 1;
-							if (0.5f + sizeHalf.width > Math.abs(position.x - cellsOccupied[1].y))
-							{
-								//cellsOccupied[1].set(cellsOccupied[1]);
-								cellsOccupiedCount = 2;
-							}
-						}
-						else
-						{
-							//cellsOccupied[0].set(cellsOccupied[0]);
-							cellsOccupiedCount = 1;
-							if (0.5f + sizeHalf.width > Math.abs(position.x - cellsOccupied[1].y))
-							{
-								if (0.5f + sizeHalf.height > Math.abs(position.y - cellsOccupied[1].x))
-								{
-									//cellsOccupied[1].set(cellsOccupied[1]);
-									//cellsOccupied[2].set(cellsOccupied[2]);
-									//cellsOccupied[3].set(cellsOccupied[3]);
-									cellsOccupiedCount = 4;
-								}
-								else
-								{
-									cellsOccupied[1].set(cellsOccupied[3]);
-									cellsOccupiedCount = 2;
-								}
-							}
-							else
-							{
-								if (0.5f + sizeHalf.height > Math.abs(position.y - cellsOccupied[2].x))
-								{
-									cellsOccupied[1].set(cellsOccupied[2]);
-									cellsOccupiedCount = 2;
-								}
-							}
-						}
-					}
-					else
-					{			
-						if (0.5f + sizeHalf.height > Math.abs(position.y - cellsOccupied[3].x))
-						{
-							cellsOccupied[0].set(cellsOccupied[3]);
-							cellsOccupiedCount = 1;
-							if (0.5f + sizeHalf.height > Math.abs(position.y - cellsOccupied[1].x))
-							{
-								cellsOccupied[1].set(cellsOccupied[1]);
-								cellsOccupiedCount = 2;
-							}
-						}
-						else
-						{
-							cellsOccupied[0].set(cellsOccupied[1]);
-							cellsOccupiedCount = 1;
-						}
-					}
-				}
-				else
-				{
-					if ((int)cellsOccupied[1].y != ZGame.level.map.size.width)
-					{
-						if (0.5f + sizeHalf.width > Math.abs(position.x - cellsOccupied[0].y))
-						{
-							//cellsOccupied[0].set(cellsOccupied[0]);
-							cellsOccupiedCount = 1;
-							if (0.5f + sizeHalf.width > Math.abs(position.x - cellsOccupied[3].y))
-							{
-								cellsOccupied[1].set(cellsOccupied[3]);
-								cellsOccupiedCount = 2;
-							}
-						}
-						else
-						{
-							cellsOccupied[0].set(cellsOccupied[3]);
-							cellsOccupiedCount = 1;
-						}
-					}
-					else
-						if ((int)cellsOccupied[1].x != ZGame.level.map.size.height)
-						{
-							if (0.5f + sizeHalf.height > Math.abs(position.y - cellsOccupied[0].x))
-							{
-								//cellsOccupied[0].set(cellsOccupied[0]);
-								cellsOccupiedCount = 1;
-								if (0.5f + sizeHalf.height > Math.abs(position.y - cellsOccupied[2].x))
-								{
-									cellsOccupied[1].set(cellsOccupied[2]);
-									cellsOccupiedCount = 2;
-								}
-							}
-							else
-							{
-								cellsOccupied[0].set(cellsOccupied[2]);
-								cellsOccupiedCount = 1;
-							}
-						}
-						else
-						{
-							//cellsOccupied[0].set(cellsOccupied[0]);
-							cellsOccupiedCount = 1;
-						}
-				}
-			}
-		}
-		
-		public void setPosition(float x, float y)
-		{
-			//TODO rewrite them
-			positionPrevious.set(position);
-			position.set(x, y);
-			setCellsOccupied();
-		}
-		
-		public void setPosition(Point2f p)
-		{
-			//TODO rewrite them
-			positionPrevious.set(position);
-			position.set(p);
-			setCellsOccupied();
-		}
-		
-		//TODO: movePosition/reducePosition!
-	}
-	
-	public ZCreature()
-	{
-		super();
-	}
-	
-	public ZCreature(int id)
-	{
-		super(id);
-	}
-	
-	public ZCreature(ZCreature c)
-	{
-		super(c);
-	}
-}
Index: app/src/main/app/src/main/java/com/example/zetta/entity/ZMap.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/entity/ZMap.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/entity/ZMap.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,221 +0,0 @@
-package com.example.zetta.entity;
-
-import java.util.ArrayList;
-
-import com.example.zetta.ZConstants;
-import com.example.zetta.ZPrimitive;
-import com.example.zetta.ZSettings;
-import com.example.zetta.ZPrimitive.Point2f;
-import com.example.zetta.ZPrimitive.Size2i;
-import com.example.zetta.core.ZGame;
-import com.example.zetta.core.ZGraphics;
-import com.example.zetta.core.ZSequencer;
-import com.example.zetta.core.ZGame.Identity;
-import com.example.zetta.core.ZGraphics.Image;
-import com.example.zetta.core.ZSequencer.Music;
-
-public final class ZMap extends Identity
-{
-	public final class GraphicsData extends ZGraphics.GraphicsData
-	{
-		public Image tile, grid, playerHighlight;
-		
-		public GraphicsData()
-		{
-			super();
-			tile = new Image();
-			grid = new Image();
-			playerHighlight = new Image();
-		}
-		
-		public GraphicsData(GraphicsData d)
-		{
-			super(d);
-			tile = new Image(d.tile);
-			grid = new Image(d.grid);
-			playerHighlight = new Image(d.playerHighlight);
-		}
-
-		@Override
-		public void draw() 
-		{
-			tile.draw();
-			grid.draw();
-			playerHighlight.draw();
-		}
-
-		@Override
-		public void update(long timeElapsed) 
-		{
-			Point2f[] playerCellsOccupied = ZGame.level.player.physicsData.cellsOccupied;
-			int playerCellsOccupiedCount = ZGame.level.player.physicsData.cellsOccupiedCount;
-			
-			tile.setModelPositionMap();
-			tile.setModelSizeHalf(size);
-			tile.update(timeElapsed);
-			
-			//TODO rewrite it?
-			playerHighlight.setModelPosition(playerCellsOccupied[0].y, playerCellsOccupied[0].x);
-			if (playerCellsOccupiedCount == ZConstants.CREATURE_CELLS_OCCUPIED_MAX)
-			{
-				playerHighlight.modelPosition.add(ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2, 
-						ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2);
-				playerHighlight.textureSize.set(2, 2);
-				playerHighlight.setModelSizeHalf(2, 2);
-			}
-			else
-				if (playerCellsOccupiedCount == 1)
-				{
-					playerHighlight.textureSize.set(1, 1);
-					playerHighlight.setModelSizeHalf(1, 1);
-				}
-				else
-				{
-					if (ZPrimitive.Compare(playerCellsOccupied[0].y, playerCellsOccupied[1].y) == true)
-					{
-						playerHighlight.modelPosition.add(0f, 
-								ZSettings.MAP_CELL_SIZE_RELATIVE.height / 2);
-						playerHighlight.textureSize.set(1, 2);
-						playerHighlight.setModelSizeHalf(1, 2);
-					}
-					else
-					{
-						playerHighlight.modelPosition.add(ZSettings.MAP_CELL_SIZE_RELATIVE.width / 2, 
-								0f);
-						playerHighlight.textureSize.set(2, 1);
-						playerHighlight.setModelSizeHalf(2, 1);
-					}
-				}
-			playerHighlight.update(timeElapsed);
-			
-			grid.setModelPositionMap();
-			grid.setModelSizeHalf(size);
-			grid.update(timeElapsed);
-		}
-	}
-	
-	public final class SequencerData extends ZSequencer.SequencerData
-	{
-		public Music music;
-		
-		public SequencerData()
-		{
-			super();
-			music = new Music();
-		}
-		
-		public SequencerData(Music _music)
-		{
-			super();
-			music = new Music(_music);
-		}
-		
-		public SequencerData(SequencerData d)
-		{
-			super(d);
-			this.music = new Music(d.music);
-		}
-	}
-	
-	public int coinsCount, score, buff = ZConstants.IDENTITY_ID_INVALID, 
-		itemsCount, objectsCount, machineriesCount, mobsCount, effectsCount;
-	public Size2i size;
-	public ZCell[][] cells;
-	public ArrayList<ZItem> items;
-	public ArrayList<ZObject> objects;
-	public ArrayList<ZMachinery> machineries;
-	public ArrayList<ZMob> mobs;
-	public ArrayList<ZEffect> effects;
-	public GraphicsData graphicsData;
-	public SequencerData sequencerData;
-	
-	public ZMap()
-	{	
-		super();
-		size = new Size2i();
-		items = new ArrayList<ZItem>();
-		objects = new ArrayList<ZObject>();
-		machineries = new ArrayList<ZMachinery>();
-		mobs = new ArrayList<ZMob>();
-		effects = new ArrayList<ZEffect>();
-		graphicsData = new GraphicsData();
-		sequencerData = new SequencerData();
-	}
-	
-	public ZMap(int id)
-	{	
-		super(id);
-		size = new Size2i();
-		items = new ArrayList<ZItem>();
-		objects = new ArrayList<ZObject>();
-		machineries = new ArrayList<ZMachinery>();
-		mobs = new ArrayList<ZMob>();
-		effects = new ArrayList<ZEffect>();
-		graphicsData = new GraphicsData();
-		sequencerData = new SequencerData();
-	}
-	
-	public ZMap(ZMap map)
-	{
-		super(map);
-		int i, j;
-		size = new Size2i(map.size);
-		buff = map.buff;
-		score = map.score;
-		coinsCount = map.coinsCount;
-		itemsCount = map.itemsCount;
-		objectsCount = map.objectsCount;
-		machineriesCount = map.machineriesCount;
-		mobsCount = map.mobsCount;
-		effectsCount = map.effectsCount;
-		
-		cells = new ZCell[size.height][size.width];
-		for (i = 0; i < size.height; ++i)
-		{
-			for (j = 0; j < size.width; ++j)
-			{
-				cells[i][j] = new ZCell(map.cells[i][j]);
-			}
-		}
-		
-		items = new ArrayList<ZItem>(itemsCount);
-		for (i = 0; i < itemsCount; ++i)
-		{
-			items.set(i, map.items.get(i));
-		}
-		
-		objects = new ArrayList<ZObject>(objectsCount);
-		for (i = 0; i < objectsCount; ++i)
-		{
-			objects.set(i, map.objects.get(i));
-		}
-		
-		machineries = new ArrayList<ZMachinery>(machineriesCount);
-		for (i = 0; i < machineriesCount; ++i)
-		{
-			machineries.set(i, map.machineries.get(i));
-		}
-		
-		mobs = new ArrayList<ZMob>(mobsCount);
-		for (i = 0; i < mobsCount; ++i)
-		{
-			mobs.set(i, map.mobs.get(i));
-		}
-		
-		effects = new ArrayList<ZEffect>(effectsCount);
-		for (i = 0; i < effectsCount; ++i)
-		{
-			effects.set(i, map.effects.get(i));
-		}
-		
-		graphicsData = new GraphicsData(map.graphicsData);
-		sequencerData = new SequencerData(map.sequencerData);
-	}
-
-	@Override
-	public void onDestroy() 
-	{
-		// TODO Auto-generated method stub
-		
-	}
-}
Index: app/src/main/app/src/main/java/com/example/zetta/entity/ZLevel.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/entity/ZLevel.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/entity/ZLevel.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,19 +0,0 @@
-package com.example.zetta.entity;
-
-import com.example.zetta.ZConstants;
-
-public final class ZLevel
-{
-	public ZPlayer player;
-	public ZMap map;
-	public long time;
-	public int state;
-	
-	public ZLevel(int id, ZPlayer player)
-	{
-		this.player = player;
-		time = 0;
-		state = ZConstants.GAME_STATE_PLAYING;
-		map = new ZMap(id);
-	}
-}
Index: app/src/main/app/src/main/res/values-sw720dp-land/dimens.xml
===================================================================
--- app/src/main/app/src/main/res/values-sw720dp-land/dimens.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/res/values-sw720dp-land/dimens.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,9 +0,0 @@
-<resources>
-
-    <!--
-         Customize dimensions originally defined in res/values/dimens.xml (such as
-         screen margins) for sw720dp devices (e.g. 10" tablets) in landscape here.
-    -->
-    <dimen name="activity_horizontal_margin">128dp</dimen>
-
-</resources>
\ No newline at end of file
Index: app/src/main/app/src/main/java/com/example/zetta/ZPrimitive.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/ZPrimitive.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/ZPrimitive.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,489 +0,0 @@
-package com.example.zetta;
-
-public final class ZPrimitive 
-{
-	static public class Size2i
-	{
-		public int width, height;
-		
-		public Size2i()
-		{
-			
-		}
-		
-		public Size2i(int w, int h)
-		{
-			width = w;
-			height = h;
-		}
-		
-		public Size2i(Size2i s)
-		{
-			width = s.width;
-			height = s.height;
-		}
-		
-		public void set(int w, int h)
-		{
-			width = w;
-			height = h;
-		}
-		
-		public float hypotenuse()
-		{
-			return (float)Math.sqrt((double)width * width + (double)height * height);
-		}
-	}
-
-	static public class Size2f
-	{
-		public float width, height;
-		
-		public Size2f()
-		{
-			
-		}
-		
-		public Size2f(float w, float h)
-		{
-			width = w;
-			height = h;
-		}
-		
-		public Size2f(Size2f s)
-		{
-			width = s.width;
-			height = s.height;
-		}
-		
-		public void set(float w, float h)
-		{
-			width = w;
-			height = h;
-		}
-		
-		public float hypotenuse()
-		{
-			return (float)Math.sqrt((double)width * width + (double)height * height);
-		}
-	}
-
-	static public class Vector2f
-	{
-		public float x, y;
-		
-		public Vector2f()
-		{
-			
-		}
-		
-		public Vector2f(float x, float y)
-		{
-			this.x = x; this.y = y;
-		}
-		
-		public Vector2f(Vector2f v)
-		{
-			x = v.x; y = v.y;
-		}
-		
-		public Vector2f(Point2f v)
-		{
-			x = v.x; y = v.y;
-		}
-		
-		public void set(float x, float y)
-		{
-			this.x = x; this.y = y;
-		}
-		
-		public void set(Vector2f v)
-		{
-			x = v.x; y = v.y;
-		}
-		
-		public void set(Point2f v)
-		{
-			x = v.x; y = v.y;
-		}
-		
-		public void add(Vector2f v)
-		{
-			x += v.x; y += v.y;
-		}
-		
-		public void add(Point2f v)
-		{
-			x += v.x; y += v.y;
-		}
-		
-		public void add(float x, float y)
-		{
-			this.x += x; this.y += y;
-		}
-		
-		public void add(float m)
-		{
-			this.x += m; this.y += m;
-		}
-		
-		public void reduce(Point2f v)
-		{
-			x -= v.x; y -= v.y;
-		}
-		
-		public void reduce(Vector2f v)
-		{
-			x -= v.x; y -= v.y;
-		}
-		
-		public void reduce(float x, float y)
-		{
-			this.x -= x; this.y -= y;
-		}
-		
-		public void reduce(float m)
-		{
-			this.x -= m; this.y -= m;
-		}
-		
-		public void multiply(float x, float y)
-		{
-			this.x *= x; this.y *= y;
-		}
-		
-		public void multiply(Vector2f v)
-		{
-			this.x *= v.x; this.y *= v.y;
-		}
-		
-		public void multiply(Point2f v)
-		{
-			this.x *= v.x; this.y *= v.y;
-		}
-		
-		public void multiply(float m)
-		{
-			this.x *= m; this.y *= m;
-		}
-		
-		public void divide(float x, float y)
-		{
-			this.x /= x; this.y /= y;
-		}
-		
-		public void divide(Vector2f v)
-		{
-			this.x /= v.x; this.y /= v.y;
-		}
-		
-		public void divide(Point2f v)
-		{
-			this.x /= v.x; this.y /= v.y;
-		}
-		
-		public void divide(float m)
-		{
-			this.x /= m; this.y /= m;
-		}
-		
-		public float length()
-		{
-			return (float)Math.sqrt((double)x * x + (double)y * y);
-		}
-		
-		public float lengthInverse()
-		{
-			return 1.0f / (float)Math.sqrt((double)x * x + (double)y * y);
-		}
-		
-		public void normalize()
-		{
-			float lengthInverse = 1.0f / (float)Math.sqrt((double)x * x + (double)y * y);
-			x *= lengthInverse; y *= lengthInverse;
-		}
-		
-		public boolean equals(Point2f v)
-		{
-			if (Compare(x, v.x) == true &&
-					Compare(y, v.y) == true)
-			{
-				return true;
-			}
-			return false;
-		}
-	}
-	
-	static public class Point2f	
-	{
-		public float x, y;
-		
-		public Point2f()
-		{
-			
-		}
-		
-		public Point2f(float x, float y)
-		{
-			this.x = x; this.y = y;
-		}
-		
-		public Point2f(Vector2f v)
-		{
-			x = v.x; y = v.y;
-		}
-		
-		public Point2f(Point2f v)
-		{
-			x = v.x; y = v.y;
-		}
-		
-		public void set(float x, float y)
-		{
-			this.x = x; this.y = y;
-		}
-		
-		public void set(Vector2f v)
-		{
-			x = v.x; y = v.y;
-		}
-		
-		public void set(Point2f v)
-		{
-			x = v.x; y = v.y;
-		}
-		
-		public void add(Vector2f v)
-		{
-			x += v.x; y += v.y;
-		}
-		
-		public void add(Point2f v)
-		{
-			x += v.x; y += v.y;
-		}
-		
-		public void add(float x, float y)
-		{
-			this.x += x; this.y += y;
-		}
-		
-		public void add(float m)
-		{
-			this.x += m; this.y += m;
-		}
-		
-		public void reduce(Vector2f v)
-		{
-			x -= v.x; y -= v.y;
-		}
-		
-		public void reduce(Point2f v)
-		{
-			x -= v.x; y -= v.y;
-		}
-		
-		public void reduce(float x, float y)
-		{
-			this.x -= x; this.y -= y;
-		}
-		
-		public void reduce(float m)
-		{
-			this.x -= m; this.y -= m;
-		}
-		
-		public void multiply(float x, float y)
-		{
-			this.x *= x; this.y *= y;
-		}
-		
-		public void multiply(Vector2f v)
-		{
-			this.x *= v.x; this.y *= v.y;
-		}
-		
-		public void multiply(Point2f v)
-		{
-			this.x *= v.x; this.y *= v.y;
-		}
-		
-		public void multiply(float m)
-		{
-			this.x *= m; this.y *= m;
-		}
-		
-		public void divide(float x, float y)
-		{
-			this.x /= x; this.y /= y;
-		}
-		
-		public void divide(Vector2f v)
-		{
-			this.x /= v.x; this.y /= v.y;
-		}
-		
-		public void divide(Point2f v)
-		{
-			this.x /= v.x; this.y /= v.y;
-		}
-		
-		public void divide(float m)
-		{
-			this.x /= m; this.y /= m;
-		}
-		
-		public float distance(Point2f v)
-		{
-			return (float)Math.sqrt(Math.pow((double)(x - v.x), 2) + Math.pow((double)(y - v.y), 2));
-		}
-		
-		public float length()
-		{
-			return (float)Math.sqrt((double)x * x + (double)y * y);
-		}
-		
-		public float lengthInverse()
-		{
-			return 1.0f / (float)Math.sqrt((double)x * x + (double)y * y);
-		}
-		
-		public boolean equals(Point2f v)
-		{
-			if (Compare(x, v.x) == true  &&
-					Compare(y, v.y) == true)
-			{
-				return true;
-			}
-			return false;
-		}
-	}
-
-	static public class Point2i	
-	{
-		public int x, y;
-		
-		public Point2i()
-		{
-			
-		}
-		
-		public Point2i(int x, int y)
-		{
-			this.x = x; this.y = y;
-		}
-		
-		public Point2i(Point2i v)
-		{
-			x = v.x; y = v.y;
-		}
-		
-		public Point2i(Point2f v)
-		{
-			x = (int)v.x; y = (int)v.y;
-		}
-		
-		public void set(int x, int y)
-		{
-			this.x = x; this.y = y;
-		}
-		
-		public void set(Point2f v)
-		{
-			x = (int)v.x; y = (int)v.y;
-		}
-		
-		public void add(Point2i v)
-		{
-			x += v.x; y += v.y;
-		}
-		
-		public void add(int x, int y)
-		{
-			this.x += x; this.y += y;
-		}
-		
-		public void add(int m)
-		{
-			this.x += m; this.y += m;
-		}
-		
-		public void reduce(Point2i v)
-		{
-			x -= v.x; y -= v.y;
-		}
-		
-		public void reduce(int x, int y)
-		{
-			this.x -= x; this.y -= y;
-		}
-		
-		public void reduce(int m)
-		{
-			this.x -= m; this.y -= m;
-		}
-		
-		public void multiply(int x, int y)
-		{
-			this.x *= x; this.y *= y;
-		}
-		
-		public void multiply(Point2i v)
-		{
-			this.x *= v.x; this.y *= v.y;
-		}
-		
-		public void multiply(int m)
-		{
-			this.x *= m; this.y *= m;
-		}
-		
-		public void divide(int x, int y)
-		{
-			this.x /= x; this.y /= y;
-		}
-
-		public void divide(Point2i v)
-		{
-			this.x /= v.x; this.y /= v.y;
-		}
-		
-		public void divide(int m)
-		{
-			this.x /= m; this.y /= m;
-		}
-		
-		public float distance(Point2i v)
-		{
-			return (float)Math.sqrt(Math.pow((double)(x - v.x), 2) + Math.pow((double)(y - v.y), 2));
-		}
-		
-		public float length()
-		{
-			return (float)Math.sqrt((double)x * x + (double)y * y);
-		}
-		
-		public float lengthInverse()
-		{
-			return 1.0f / (int)Math.sqrt((double)x * x + (double)y * y);
-		}
-		
-		public boolean equals(Point2i v)
-		{
-			if (x == v.x  && y == v.y)
-			{
-				return true;
-			}
-			return false;
-		}
-	}
-	
-	static final public boolean Compare(float x, float y)
-	{
-		if (Math.abs(x - y) <= ZConstants.COMPARISON_PRECISION)
-		{
-			return true;
-		}
-		return false;
-	}
-}
Index: app/src/main/app/src/main/AndroidManifest.xml
===================================================================
--- app/src/main/app/src/main/AndroidManifest.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/AndroidManifest.xml	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,27 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.example.zetta"
-    android:versionCode="1"
-    android:versionName="1.0" >
-
-    <uses-sdk
-        android:minSdkVersion="10"
-        android:targetSdkVersion="10" />
-
-    <application
-        android:allowBackup="true"
-        android:icon="@drawable/ic_launcher"
-        android:label="@string/app_name"
-        android:theme="@android:style/Theme.Black.NoTitleBar" android:debuggable="true">
-        <activity
-            android:name="com.example.zetta.activity.ZGameActivity"
-            android:label="@string/app_name" >
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-    </application>
-
-</manifest>
\ No newline at end of file
Index: app/src/main/app/src/main/java/com/example/zetta/ZProperty.java
===================================================================
--- app/src/main/app/src/main/java/com/example/zetta/ZProperty.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
+++ app/src/main/app/src/main/java/com/example/zetta/ZProperty.java	(revision 8f964a22eda8bc71d9c77c11b748df406e21f7d7)
@@ -1,144 +0,0 @@
-package com.example.zetta;
-
-import java.util.ArrayList;
-import com.example.zetta.entity.ZPlayer;
-
-public final class ZProperty 
-{
-	static public ZPlayer player;
-	static public ArrayList<Integer> items, mobs, players, machineries, objects, levels;
-	
-	static
-	{
-		player = new ZPlayer();
-		items = new ArrayList<Integer>();
-		mobs = new ArrayList<Integer>();
-		players = new ArrayList<Integer>();
-		machineries = new ArrayList<Integer>();
-		objects = new ArrayList<Integer>();
-		levels = new ArrayList<Integer>();
-	}
-
-	static public ZPlayer GetPlayer()
-	{
-		ZPlayer playerCopy = new ZPlayer(player);
-		player.buffs.clear();
-		player.score.setMultiplier(ZConstants.SCORE_MULTIPLIER_INITIAL);
-		return playerCopy;
-	}
-	
-	static public void SetItems(int[] _items)
-	{
-		for (int i = 0, n = _items.length; i < n; ++i)
-		{
-			items.add(Integer.valueOf(_items[i]));
-		}
-	}
-	
-	static public void SetMobs(int[] _mobs)
-	{
-		for (int i = 0, n = _mobs.length; i < n; ++i)
-		{
-			mobs.add(Integer.valueOf(_mobs[i]));
-		}
-	}
-	
-	static public void SetPlayers(int[] _players)
-	{
-		for (int i = 0, n = _players.length; i < n; ++i)
-		{
-			players.add(Integer.valueOf(_players[i]));
-		}
-	}
-	
-	static public void SetMachineries(int[] _machineries)
-	{
-		for (int i = 0, n = _machineries.length; i < n; ++i)
-		{
-			machineries.add(Integer.valueOf(_machineries[i]));
-		}
-	}
-	
-	static public void SetObjects(int[] _objects)
-	{
-		for (int i = 0, n = _objects.length; i < n; ++i)
-		{
-			objects.add(Integer.valueOf(_objects[i]));
-		}
-	}
-	
-	static public void SetLevels(int[] _levels)
-
-	{
-		for (int i = 0, n = _levels.length; i < n; ++i)
-		{
-			levels.add(Integer.valueOf(_levels[i]));
-		}
-	}
-
-	static public int[] GetItems()
-	{
-		int n = items.size();
-		int[] _items = new int[n];
-		for (int i = 0; i < n; ++i)
-		{
-			_items[i] = items.get(i).intValue();
-		}
-		return _items;
-	}
-	
-	static public int[] GetMobs()
-	{
-		int n = mobs.size();
-		int[] _mobs = new int[n];
-		for (int i = 0; i < n; ++i)
-		{
-			_mobs[i] = mobs.get(i).intValue();
-		}
-		return _mobs;
-	}
-	
-	static public int[] GetPlayers()
-	{
-		int n = players.size();
-		int[] _players = new int[n];
-		for (int i = 0; i < n; ++i)
-		{
-			_players[i] = players.get(i).intValue();
-		}
-		return _players;
-	}
-	
-	static public int[] GetMachineries()
-	{
-		int n = machineries.size();
-		int[] _machineries = new int[n];
-		for (int i = 0; i < n; ++i)
-		{
-			_machineries[i] = machineries.get(i).intValue();
-		}
-		return _machineries;
-	}
-	
-	static public int[] GetObjects()
-	{
-		int n = objects.size();
-		int[] _objects = new int[n];
-		for (int i = 0; i < n; ++i)
-		{
-			_objects[i] = objects.get(i).intValue();
-		}
-		return _objects;
-	}
-	
-	static public int[] GetLevels()
-	{
-		int n = levels.size();
-		int[] _levels = new int[n];
-		for (int i = 0; i < n; ++i)
-		{
-			_levels[i] = levels.get(i).intValue();
-		}
-		return _levels;
-	}
-}
